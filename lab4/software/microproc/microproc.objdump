
microproc.elf:     file format elf32-littlenios2
microproc.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x000003d0 memsz 0x000003d0 flags r-x
    LOAD off    0x000013f0 vaddr 0x000013f0 paddr 0x000013f4 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000013f8 vaddr 0x000013f8 paddr 0x000013f8 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  000013f4  2**0
                  CONTENTS
  2 .text         000003b8  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  000013d8  000013d8  000013d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000013f0  000013f4  000013f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  000013f8  000013f8  000013f8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00001404  00001404  000013f4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000188  00000000  00000000  00001418  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000a9f  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000649  00000000  00000000  0000203f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000006c9  00000000  00000000  00002688  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000027c  00000000  00000000  00002d54  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000005d3  00000000  00000000  00002fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000001e  00000000  00000000  000035a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000035c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000040  00000000  00000000  000035d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00004400  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00004403  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00004408  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00004409  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000440a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00004413  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000441c  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000e  00000000  00000000  00004425  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001a  00000000  00000000  00004433  2**0
                  CONTENTS, READONLY
 26 .jdi          0000530e  00000000  00000000  0000444d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0004abec  00000000  00000000  0000975b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
000013d8 l    d  .rodata	00000000 .rodata
000013f0 l    d  .rwdata	00000000 .rwdata
000013f8 l    d  .bss	00000000 .bss
00001404 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../microproc_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
000010ac l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00001190 g     F .text	0000004c alt_main
000013f4 g       *ABS*	00000000 __flash_rwdata_start
00001238 g     F .text	00000048 alt_putstr
000013f0 g     O .rwdata	00000004 jtag_uart
0000139c g     F .text	00000020 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
000013fc g     O .bss	00000004 alt_argv
000093f0 g       *ABS*	00000000 _gp
00001404 g       *ABS*	00000000 __bss_end
00001364 g     F .text	0000001c alt_dcache_flush_all
000013f4 g       *ABS*	00000000 __ram_rwdata_end
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory
000013f0 g       *ABS*	00000000 __ram_rodata_end
00001404 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
000012d0 g     F .text	00000094 altera_avalon_jtag_uart_write
00001020 g     F .text	0000003c _start
000012b4 g     F .text	0000001c alt_sys_init
000013f0 g       *ABS*	00000000 __ram_rwdata_start
000013d8 g       *ABS*	00000000 __ram_rodata_start
00001404 g       *ABS*	00000000 __alt_stack_base
000013f8 g       *ABS*	00000000 __bss_start
0000105c g     F .text	00000050 main
00001400 g     O .bss	00000004 alt_envp
000013d8 g       *ABS*	00000000 __flash_rodata_start
00001280 g     F .text	00000034 alt_irq_init
000013f8 g     O .bss	00000004 alt_argc
00001020 g       *ABS*	00000000 __ram_exceptions_start
000013f4 g       *ABS*	00000000 _edata
00001404 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
000013bc g     F .text	0000001c strlen
000011dc g     F .text	0000005c alt_putchar
00001380 g     F .text	0000001c alt_icache_flush_all
00001110 g     F .text	00000080 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a4fc14 	ori	gp,gp,37872
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	1084fe14 	ori	r2,r2,5112

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c50114 	ori	r3,r3,5124

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_gp+0xffff7c54>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00011100 	call	1110 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00011900 	call	1190 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <_gp+0xffff7c68>

0000105c <main>:
#define character_received (volatile char *) 0x3010
#define parallel_data_bus (volatile char *) 0x3040

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    105c:	01000034 	movhi	r4,0

#define character_received (volatile char *) 0x3010
#define parallel_data_bus (volatile char *) 0x3040

int main()
{ 
    1060:	defffd04 	addi	sp,sp,-12
  alt_putstr("Hello from Nios II!\n");
    1064:	2104f604 	addi	r4,r4,5080

#define character_received (volatile char *) 0x3010
#define parallel_data_bus (volatile char *) 0x3040

int main()
{ 
    1068:	dc400115 	stw	r17,4(sp)
    106c:	dc000015 	stw	r16,0(sp)
    1070:	dfc00215 	stw	ra,8(sp)
  alt_putstr("Hello from Nios II!\n");



  while (1) {
	  if (*character_received) {
    1074:	044c0404 	movi	r17,12304
#define character_received (volatile char *) 0x3010
#define parallel_data_bus (volatile char *) 0x3040

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    1078:	00012380 	call	1238 <alt_putstr>



  while (1) {
	  if (*character_received) {
		  alt_putchar(*parallel_data_bus);
    107c:	040c1004 	movi	r16,12352
  alt_putstr("Hello from Nios II!\n");



  while (1) {
	  if (*character_received) {
    1080:	88800003 	ldbu	r2,0(r17)
    1084:	10803fcc 	andi	r2,r2,255
    1088:	1080201c 	xori	r2,r2,128
    108c:	10bfe004 	addi	r2,r2,-128
    1090:	103ffb26 	beq	r2,zero,1080 <_gp+0xffff7c90>
		  alt_putchar(*parallel_data_bus);
    1094:	81000003 	ldbu	r4,0(r16)
    1098:	21003fcc 	andi	r4,r4,255
    109c:	2100201c 	xori	r4,r4,128
    10a0:	213fe004 	addi	r4,r4,-128
    10a4:	00011dc0 	call	11dc <alt_putchar>
    10a8:	003ff506 	br	1080 <_gp+0xffff7c90>

000010ac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    10ac:	defffc04 	addi	sp,sp,-16
    10b0:	df000315 	stw	fp,12(sp)
    10b4:	df000304 	addi	fp,sp,12
    10b8:	e13ffd15 	stw	r4,-12(fp)
    10bc:	e17ffe15 	stw	r5,-8(fp)
    10c0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    10c4:	e0fffe17 	ldw	r3,-8(fp)
    10c8:	e0bffd17 	ldw	r2,-12(fp)
    10cc:	18800c26 	beq	r3,r2,1100 <alt_load_section+0x54>
  {
    while( to != end )
    10d0:	00000806 	br	10f4 <alt_load_section+0x48>
    {
      *to++ = *from++;
    10d4:	e0bffe17 	ldw	r2,-8(fp)
    10d8:	10c00104 	addi	r3,r2,4
    10dc:	e0fffe15 	stw	r3,-8(fp)
    10e0:	e0fffd17 	ldw	r3,-12(fp)
    10e4:	19000104 	addi	r4,r3,4
    10e8:	e13ffd15 	stw	r4,-12(fp)
    10ec:	18c00017 	ldw	r3,0(r3)
    10f0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    10f4:	e0fffe17 	ldw	r3,-8(fp)
    10f8:	e0bfff17 	ldw	r2,-4(fp)
    10fc:	18bff51e 	bne	r3,r2,10d4 <_gp+0xffff7ce4>
    {
      *to++ = *from++;
    }
  }
}
    1100:	e037883a 	mov	sp,fp
    1104:	df000017 	ldw	fp,0(sp)
    1108:	dec00104 	addi	sp,sp,4
    110c:	f800283a 	ret

00001110 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1110:	defffe04 	addi	sp,sp,-8
    1114:	dfc00115 	stw	ra,4(sp)
    1118:	df000015 	stw	fp,0(sp)
    111c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    1120:	01000034 	movhi	r4,0
    1124:	2104fd04 	addi	r4,r4,5108
    1128:	01400034 	movhi	r5,0
    112c:	2944fc04 	addi	r5,r5,5104
    1130:	01800034 	movhi	r6,0
    1134:	3184fd04 	addi	r6,r6,5108
    1138:	00010ac0 	call	10ac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    113c:	01000034 	movhi	r4,0
    1140:	21040804 	addi	r4,r4,4128
    1144:	01400034 	movhi	r5,0
    1148:	29440804 	addi	r5,r5,4128
    114c:	01800034 	movhi	r6,0
    1150:	31840804 	addi	r6,r6,4128
    1154:	00010ac0 	call	10ac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    1158:	01000034 	movhi	r4,0
    115c:	2104f604 	addi	r4,r4,5080
    1160:	01400034 	movhi	r5,0
    1164:	2944f604 	addi	r5,r5,5080
    1168:	01800034 	movhi	r6,0
    116c:	3184fc04 	addi	r6,r6,5104
    1170:	00010ac0 	call	10ac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1174:	00013640 	call	1364 <alt_dcache_flush_all>
  alt_icache_flush_all();
    1178:	00013800 	call	1380 <alt_icache_flush_all>
}
    117c:	e037883a 	mov	sp,fp
    1180:	dfc00117 	ldw	ra,4(sp)
    1184:	df000017 	ldw	fp,0(sp)
    1188:	dec00204 	addi	sp,sp,8
    118c:	f800283a 	ret

00001190 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1190:	defffe04 	addi	sp,sp,-8
    1194:	dfc00115 	stw	ra,4(sp)
    1198:	df000015 	stw	fp,0(sp)
    119c:	d839883a 	mov	fp,sp
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    11a0:	0009883a 	mov	r4,zero
    11a4:	00012800 	call	1280 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    11a8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    11ac:	00012b40 	call	12b4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    11b0:	d1200217 	ldw	r4,-32760(gp)
    11b4:	d0e00317 	ldw	r3,-32756(gp)
    11b8:	d0a00417 	ldw	r2,-32752(gp)
    11bc:	180b883a 	mov	r5,r3
    11c0:	100d883a 	mov	r6,r2
    11c4:	000105c0 	call	105c <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    11c8:	e037883a 	mov	sp,fp
    11cc:	dfc00117 	ldw	ra,4(sp)
    11d0:	df000017 	ldw	fp,0(sp)
    11d4:	dec00204 	addi	sp,sp,8
    11d8:	f800283a 	ret

000011dc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    11dc:	defffc04 	addi	sp,sp,-16
    11e0:	dfc00315 	stw	ra,12(sp)
    11e4:	df000215 	stw	fp,8(sp)
    11e8:	df000204 	addi	fp,sp,8
    11ec:	e13fff15 	stw	r4,-4(fp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    11f0:	e0bfff17 	ldw	r2,-4(fp)
    11f4:	e0bffe05 	stb	r2,-8(fp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    11f8:	01000034 	movhi	r4,0
    11fc:	2104fc04 	addi	r4,r4,5104
    1200:	e17ffe04 	addi	r5,fp,-8
    1204:	01800044 	movi	r6,1
    1208:	000f883a 	mov	r7,zero
    120c:	00012d00 	call	12d0 <altera_avalon_jtag_uart_write>
    1210:	10bfffd8 	cmpnei	r2,r2,-1
    1214:	1000021e 	bne	r2,zero,1220 <alt_putchar+0x44>
        return -1;
    1218:	00bfffc4 	movi	r2,-1
    121c:	00000106 	br	1224 <alt_putchar+0x48>
    }
    return c;
    1220:	e0bfff17 	ldw	r2,-4(fp)
#else
    return putchar(c);
#endif
#endif
}
    1224:	e037883a 	mov	sp,fp
    1228:	dfc00117 	ldw	ra,4(sp)
    122c:	df000017 	ldw	fp,0(sp)
    1230:	dec00204 	addi	sp,sp,8
    1234:	f800283a 	ret

00001238 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    1238:	defffd04 	addi	sp,sp,-12
    123c:	dfc00215 	stw	ra,8(sp)
    1240:	df000115 	stw	fp,4(sp)
    1244:	df000104 	addi	fp,sp,4
    1248:	e13fff15 	stw	r4,-4(fp)
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    124c:	e13fff17 	ldw	r4,-4(fp)
    1250:	00013bc0 	call	13bc <strlen>
    1254:	01000034 	movhi	r4,0
    1258:	2104fc04 	addi	r4,r4,5104
    125c:	e17fff17 	ldw	r5,-4(fp)
    1260:	100d883a 	mov	r6,r2
    1264:	000f883a 	mov	r7,zero
    1268:	00012d00 	call	12d0 <altera_avalon_jtag_uart_write>
#else
    return fputs(str, stdout);
#endif
#endif
}
    126c:	e037883a 	mov	sp,fp
    1270:	dfc00117 	ldw	ra,4(sp)
    1274:	df000017 	ldw	fp,0(sp)
    1278:	dec00204 	addi	sp,sp,8
    127c:	f800283a 	ret

00001280 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1280:	defffd04 	addi	sp,sp,-12
    1284:	dfc00215 	stw	ra,8(sp)
    1288:	df000115 	stw	fp,4(sp)
    128c:	df000104 	addi	fp,sp,4
    1290:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
    1294:	000139c0 	call	139c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1298:	00800044 	movi	r2,1
    129c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    12a0:	e037883a 	mov	sp,fp
    12a4:	dfc00117 	ldw	ra,4(sp)
    12a8:	df000017 	ldw	fp,0(sp)
    12ac:	dec00204 	addi	sp,sp,8
    12b0:	f800283a 	ret

000012b4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    12b4:	deffff04 	addi	sp,sp,-4
    12b8:	df000015 	stw	fp,0(sp)
    12bc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
}
    12c0:	e037883a 	mov	sp,fp
    12c4:	df000017 	ldw	fp,0(sp)
    12c8:	dec00104 	addi	sp,sp,4
    12cc:	f800283a 	ret

000012d0 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    12d0:	defff904 	addi	sp,sp,-28
    12d4:	df000615 	stw	fp,24(sp)
    12d8:	df000604 	addi	fp,sp,24
    12dc:	e13ffc15 	stw	r4,-16(fp)
    12e0:	e17ffd15 	stw	r5,-12(fp)
    12e4:	e1bffe15 	stw	r6,-8(fp)
    12e8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    12ec:	e0bffc17 	ldw	r2,-16(fp)
    12f0:	10800017 	ldw	r2,0(r2)
    12f4:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    12f8:	e0bffe17 	ldw	r2,-8(fp)
    12fc:	e0fffd17 	ldw	r3,-12(fp)
    1300:	1885883a 	add	r2,r3,r2
    1304:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    1308:	00000e06 	br	1344 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    130c:	e0bffa17 	ldw	r2,-24(fp)
    1310:	10800104 	addi	r2,r2,4
    1314:	10800037 	ldwio	r2,0(r2)
    1318:	10bfffec 	andhi	r2,r2,65535
    131c:	10000926 	beq	r2,zero,1344 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1320:	e0fffa17 	ldw	r3,-24(fp)
    1324:	e0bffd17 	ldw	r2,-12(fp)
    1328:	11000044 	addi	r4,r2,1
    132c:	e13ffd15 	stw	r4,-12(fp)
    1330:	10800003 	ldbu	r2,0(r2)
    1334:	10803fcc 	andi	r2,r2,255
    1338:	1080201c 	xori	r2,r2,128
    133c:	10bfe004 	addi	r2,r2,-128
    1340:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1344:	e0fffd17 	ldw	r3,-12(fp)
    1348:	e0bffb17 	ldw	r2,-20(fp)
    134c:	18bfef36 	bltu	r3,r2,130c <_gp+0xffff7f1c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    1350:	e0bffe17 	ldw	r2,-8(fp)
}
    1354:	e037883a 	mov	sp,fp
    1358:	df000017 	ldw	fp,0(sp)
    135c:	dec00104 	addi	sp,sp,4
    1360:	f800283a 	ret

00001364 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1364:	deffff04 	addi	sp,sp,-4
    1368:	df000015 	stw	fp,0(sp)
    136c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1370:	e037883a 	mov	sp,fp
    1374:	df000017 	ldw	fp,0(sp)
    1378:	dec00104 	addi	sp,sp,4
    137c:	f800283a 	ret

00001380 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1380:	deffff04 	addi	sp,sp,-4
    1384:	df000015 	stw	fp,0(sp)
    1388:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    138c:	e037883a 	mov	sp,fp
    1390:	df000017 	ldw	fp,0(sp)
    1394:	dec00104 	addi	sp,sp,4
    1398:	f800283a 	ret

0000139c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    139c:	deffff04 	addi	sp,sp,-4
    13a0:	df000015 	stw	fp,0(sp)
    13a4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    13a8:	000170fa 	wrctl	ienable,zero
}
    13ac:	e037883a 	mov	sp,fp
    13b0:	df000017 	ldw	fp,0(sp)
    13b4:	dec00104 	addi	sp,sp,4
    13b8:	f800283a 	ret

000013bc <strlen>:
    13bc:	2005883a 	mov	r2,r4
    13c0:	10c00007 	ldb	r3,0(r2)
    13c4:	18000226 	beq	r3,zero,13d0 <strlen+0x14>
    13c8:	10800044 	addi	r2,r2,1
    13cc:	003ffc06 	br	13c0 <_gp+0xffff7fd0>
    13d0:	1105c83a 	sub	r2,r2,r4
    13d4:	f800283a 	ret
