
microproc.elf:     file format elf32-littlenios2
microproc.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000810 memsz 0x00000810 flags r-x
    LOAD off    0x00001830 vaddr 0x00001830 paddr 0x000018a0 align 2**12
         filesz 0x00000070 memsz 0x00000070 flags rw-
    LOAD off    0x00001910 vaddr 0x00001910 paddr 0x00001910 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  000018a0  2**0
                  CONTENTS
  2 .text         00000748  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000c8  00001768  00001768  00001768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000070  00001830  000018a0  00001830  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00001910  00001910  00001910  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  0000191c  0000191c  000018a0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000270  00000000  00000000  000018c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001d37  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000dd4  00000000  00000000  0000386f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000dc1  00000000  00000000  00004643  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003d0  00000000  00000000  00005404  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000a13  00000000  00000000  000057d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000616  00000000  00000000  000061e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00006800  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000c8  00000000  00000000  00006840  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000079fc  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000079ff  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00007a04  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00007a05  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00007a06  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00007a0f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00007a18  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000e  00000000  00000000  00007a21  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000020  00000000  00000000  00007a2f  2**0
                  CONTENTS, READONLY
 26 .jdi          00005248  00000000  00000000  00007a4f  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00050bc5  00000000  00000000  0000cc97  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
00001768 l    d  .rodata	00000000 .rodata
00001830 l    d  .rwdata	00000000 .rwdata
00001910 l    d  .bss	00000000 .bss
0000191c l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../microproc_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000015e4 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00001614 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
000013f4 g     F .text	0000002c alt_main
000018a0 g       *ABS*	00000000 __flash_rwdata_start
00001468 g     F .text	00000038 alt_putstr
00001888 g     O .rwdata	00000004 jtag_uart
000015f0 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001914 g     O .bss	00000004 alt_argv
00009888 g       *ABS*	00000000 _gp
000014a0 g     F .text	00000004 usleep
00001830 g     O .rwdata	00000030 alt_fd_list
000014c8 g     F .text	0000005c altera_avalon_jtag_uart_read
00001730 g     F .text	00000008 .hidden __udivsi3
00001214 g     F .text	00000034 playerTwoPlay
0000188c g     O .rwdata	00000004 alt_max_fd
0000191c g       *ABS*	00000000 __bss_end
000012b8 g     F .text	00000044 alt_getchar
0000105c g     F .text	00000078 send
00001860 g     O .rwdata	00000028 alt_dev_null
000015e0 g     F .text	00000004 alt_dcache_flush_all
000018a0 g       *ABS*	00000000 __ram_rwdata_end
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory
00001890 g     O .rwdata	00000008 alt_dev_list
00001830 g       *ABS*	00000000 __ram_rodata_end
00001738 g     F .text	00000008 .hidden __umodsi3
0000191c g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001524 g     F .text	00000034 altera_avalon_jtag_uart_write
00001020 g     F .text	0000003c _start
000014c4 g     F .text	00000004 alt_sys_init
000011e0 g     F .text	00000034 playerOnePlay
00001740 g     F .text	00000028 .hidden __mulsi3
00001830 g       *ABS*	00000000 __ram_rwdata_start
00001768 g       *ABS*	00000000 __ram_rodata_start
00001558 g     F .text	00000088 alt_busy_sleep
0000191c g       *ABS*	00000000 __alt_stack_base
00001910 g       *ABS*	00000000 __bss_start
00001248 g     F .text	00000070 main
00001910 g     O .bss	00000004 alt_envp
00001680 g     F .text	00000054 .hidden __divsi3
00001768 g       *ABS*	00000000 __flash_rodata_start
000014a4 g     F .text	00000020 alt_irq_init
00001918 g     O .bss	00000004 alt_argc
000010d4 g     F .text	000000ec receive
00001898 g     O .rwdata	00000008 alt_fs_list
00001020 g       *ABS*	00000000 __ram_exceptions_start
000018a0 g       *ABS*	00000000 _edata
0000191c g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
000011c0 g     F .text	00000020 getPlayerNum
000016d4 g     F .text	0000005c .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
000015f8 g     F .text	0000001c strlen
00001420 g     F .text	00000048 alt_putchar
000015ec g     F .text	00000004 alt_icache_flush_all
000012fc g     F .text	000000f8 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a62214 	ori	gp,gp,39048
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	10864414 	ori	r2,r2,6416

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c64714 	ori	r3,r3,6428

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_gp+0xffff77bc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00012fc0 	call	12fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00013f40 	call	13f4 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <_gp+0xffff77d0>

0000105c <send>:

  return 0;
}


int send(int * str) {
    105c:	defffe04 	addi	sp,sp,-8
    1060:	dc000015 	stw	r16,0(sp)
    1064:	2021883a 	mov	r16,r4
	alt_putstr("send!\n");
    1068:	01000034 	movhi	r4,0
    106c:	2105da04 	addi	r4,r4,5992

  return 0;
}


int send(int * str) {
    1070:	dfc00115 	stw	ra,4(sp)
	alt_putstr("send!\n");
    1074:	00014680 	call	1468 <alt_putstr>
	*data_bus_out = str;
    1078:	0005883a 	mov	r2,zero
    107c:	14000005 	stb	r16,0(r2)
	*transmit_enable = 0;
    1080:	008c0c04 	movi	r2,12336
    1084:	10000005 	stb	zero,0(r2)
	*load = 1;
    1088:	040c0004 	movi	r16,12288
    108c:	00800044 	movi	r2,1
    1090:	80800005 	stb	r2,0(r16)
	usleep(100);
    1094:	01001904 	movi	r4,100
    1098:	00014a00 	call	14a0 <usleep>
	*load = 0;
	while (1) {
		if (*character_sent) {
    109c:	00cc0804 	movi	r3,12320
	alt_putstr("send!\n");
	*data_bus_out = str;
	*transmit_enable = 0;
	*load = 1;
	usleep(100);
	*load = 0;
    10a0:	80000005 	stb	zero,0(r16)
	while (1) {
		if (*character_sent) {
    10a4:	18800003 	ldbu	r2,0(r3)
    10a8:	10803fcc 	andi	r2,r2,255
    10ac:	1080201c 	xori	r2,r2,128
    10b0:	10bfe004 	addi	r2,r2,-128
    10b4:	103ffb26 	beq	r2,zero,10a4 <_gp+0xffff781c>
			usleep(1000);
    10b8:	0100fa04 	movi	r4,1000
    10bc:	00014a00 	call	14a0 <usleep>
		}
	}

	return 0;

}
    10c0:	0005883a 	mov	r2,zero
    10c4:	dfc00117 	ldw	ra,4(sp)
    10c8:	dc000017 	ldw	r16,0(sp)
    10cc:	dec00204 	addi	sp,sp,8
    10d0:	f800283a 	ret

000010d4 <receive>:

int receive() {
	alt_putstr("Receive!\n");
    10d4:	01000034 	movhi	r4,0

	return 0;

}

int receive() {
    10d8:	defffe04 	addi	sp,sp,-8
	alt_putstr("Receive!\n");
    10dc:	2105dc04 	addi	r4,r4,6000

	return 0;

}

int receive() {
    10e0:	dfc00115 	stw	ra,4(sp)
    10e4:	dc000015 	stw	r16,0(sp)
	alt_putstr("Receive!\n");
    10e8:	00014680 	call	1468 <alt_putstr>
	int data;
	if (*character_received) {
    10ec:	008c0404 	movi	r2,12304
    10f0:	10800003 	ldbu	r2,0(r2)
    10f4:	10803fcc 	andi	r2,r2,255
    10f8:	1080201c 	xori	r2,r2,128
    10fc:	10bfe004 	addi	r2,r2,-128
    1100:	10002b26 	beq	r2,zero,11b0 <receive+0xdc>
	  usleep(100);
    1104:	01001904 	movi	r4,100
    1108:	00014a00 	call	14a0 <usleep>
	  data = *data_bus_in;
    110c:	008c1004 	movi	r2,12352
    1110:	14000003 	ldbu	r16,0(r2)
    1114:	84003fcc 	andi	r16,r16,255
    1118:	8400201c 	xori	r16,r16,128
    111c:	843fe004 	addi	r16,r16,-128


	  if (data & 128) {
    1120:	8000070e 	bge	r16,zero,1140 <receive+0x6c>
		  data = (data / 2) & 127;
    1124:	8004d7fa 	srli	r2,r16,31
		  alt_putstr("fix\n");
    1128:	01000034 	movhi	r4,0
    112c:	2105df04 	addi	r4,r4,6012
	  usleep(100);
	  data = *data_bus_in;


	  if (data & 128) {
		  data = (data / 2) & 127;
    1130:	1421883a 	add	r16,r2,r16
    1134:	8021d07a 	srai	r16,r16,1
    1138:	84001fcc 	andi	r16,r16,127
		  alt_putstr("fix\n");
    113c:	00014680 	call	1468 <alt_putstr>
	  }
	  if (data == 'w') {
    1140:	00801dc4 	movi	r2,119
    1144:	8080031e 	bne	r16,r2,1154 <receive+0x80>
		  alt_putstr("You missed loser\n");
    1148:	01000034 	movhi	r4,0
    114c:	2105e104 	addi	r4,r4,6020
    1150:	00001306 	br	11a0 <receive+0xcc>
	  } else if (data == 'x') {
    1154:	00801e04 	movi	r2,120
    1158:	8080031e 	bne	r16,r2,1168 <receive+0x94>
		  alt_putstr("Hit!\n");
    115c:	01000034 	movhi	r4,0
    1160:	2105e604 	addi	r4,r4,6040
    1164:	00000e06 	br	11a0 <receive+0xcc>
	  } else if (data == 'y') {
    1168:	00801e44 	movi	r2,121
    116c:	8080031e 	bne	r16,r2,117c <receive+0xa8>
		  alt_putstr("You win!\n");
    1170:	01000034 	movhi	r4,0
    1174:	2105e804 	addi	r4,r4,6048
    1178:	00000906 	br	11a0 <receive+0xcc>
	  } else if (data == 'z') {
    117c:	00801e84 	movi	r2,122
    1180:	8080031e 	bne	r16,r2,1190 <receive+0xbc>
		  alt_putstr("You loze!\n");
    1184:	01000034 	movhi	r4,0
    1188:	2105eb04 	addi	r4,r4,6060
    118c:	00000406 	br	11a0 <receive+0xcc>
	  } else {
		  alt_putchar(data);
    1190:	8009883a 	mov	r4,r16
    1194:	00014200 	call	1420 <alt_putchar>
		  alt_putstr("\n");
    1198:	01000034 	movhi	r4,0
    119c:	2105de04 	addi	r4,r4,6008
	  }

	}
}
    11a0:	dfc00117 	ldw	ra,4(sp)
    11a4:	dc000017 	ldw	r16,0(sp)
    11a8:	dec00204 	addi	sp,sp,8
		  alt_putstr("You win!\n");
	  } else if (data == 'z') {
		  alt_putstr("You loze!\n");
	  } else {
		  alt_putchar(data);
		  alt_putstr("\n");
    11ac:	00014681 	jmpi	1468 <alt_putstr>
	  }

	}
}
    11b0:	dfc00117 	ldw	ra,4(sp)
    11b4:	dc000017 	ldw	r16,0(sp)
    11b8:	dec00204 	addi	sp,sp,8
    11bc:	f800283a 	ret

000011c0 <getPlayerNum>:


int getPlayerNum() {
	alt_putstr("Are you player 1 or player 2? \n");
    11c0:	01000034 	movhi	r4,0

	}
}


int getPlayerNum() {
    11c4:	deffff04 	addi	sp,sp,-4
	alt_putstr("Are you player 1 or player 2? \n");
    11c8:	2105ee04 	addi	r4,r4,6072

	}
}


int getPlayerNum() {
    11cc:	dfc00015 	stw	ra,0(sp)
	alt_putstr("Are you player 1 or player 2? \n");
    11d0:	00014680 	call	1468 <alt_putstr>
	int num = alt_getchar();
	return num;


}
    11d4:	dfc00017 	ldw	ra,0(sp)
    11d8:	dec00104 	addi	sp,sp,4
}


int getPlayerNum() {
	alt_putstr("Are you player 1 or player 2? \n");
	int num = alt_getchar();
    11dc:	00012b81 	jmpi	12b8 <alt_getchar>

000011e0 <playerOnePlay>:


}


int playerOnePlay(){
    11e0:	defffd04 	addi	sp,sp,-12
    11e4:	dc400115 	stw	r17,4(sp)
    11e8:	dc000015 	stw	r16,0(sp)
    11ec:	dfc00215 	stw	ra,8(sp)
	while(1)	{
		*transmit_enable = 0;
    11f0:	040c0c04 	movi	r16,12336
		int character = alt_getchar();
		send(character);
		*transmit_enable = 1;
    11f4:	04400044 	movi	r17,1
}


int playerOnePlay(){
	while(1)	{
		*transmit_enable = 0;
    11f8:	80000005 	stb	zero,0(r16)
		int character = alt_getchar();
    11fc:	00012b80 	call	12b8 <alt_getchar>
		send(character);
    1200:	1009883a 	mov	r4,r2
    1204:	000105c0 	call	105c <send>
		*transmit_enable = 1;
    1208:	84400005 	stb	r17,0(r16)
		receive();
    120c:	00010d40 	call	10d4 <receive>
	}
    1210:	003ff906 	br	11f8 <_gp+0xffff7970>

00001214 <playerTwoPlay>:
	return 0;

}


int playerTwoPlay(){
    1214:	defffd04 	addi	sp,sp,-12
    1218:	dc400115 	stw	r17,4(sp)
    121c:	dc000015 	stw	r16,0(sp)
    1220:	dfc00215 	stw	ra,8(sp)
	while (1) {
		*transmit_enable = 1;
    1224:	040c0c04 	movi	r16,12336
    1228:	04400044 	movi	r17,1
    122c:	84400005 	stb	r17,0(r16)
		receive();
    1230:	00010d40 	call	10d4 <receive>

		*transmit_enable = 0;
    1234:	80000005 	stb	zero,0(r16)
		int character = alt_getchar();
    1238:	00012b80 	call	12b8 <alt_getchar>
		send(character);
    123c:	1009883a 	mov	r4,r2
    1240:	000105c0 	call	105c <send>
	}
    1244:	003ff906 	br	122c <_gp+0xffff79a4>

00001248 <main>:
int playerOnePlay();


int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    1248:	01000034 	movhi	r4,0
int receive();
int playerOnePlay();


int main()
{ 
    124c:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
    1250:	2105f604 	addi	r4,r4,6104
int receive();
int playerOnePlay();


int main()
{ 
    1254:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
    1258:	00014680 	call	1468 <alt_putstr>
  alt_putstr("Welcome to Battleship!\n");
    125c:	01000034 	movhi	r4,0
    1260:	2105fc04 	addi	r4,r4,6128
    1264:	00014680 	call	1468 <alt_putstr>

  int character;
  int data;


  *transmit_enable = 1;
    1268:	00c00044 	movi	r3,1
    126c:	008c0c04 	movi	r2,12336
    1270:	10c00005 	stb	r3,0(r2)
  int playerNum = getPlayerNum();
    1274:	00011c00 	call	11c0 <getPlayerNum>


  switch (playerNum) {
    1278:	00c00c44 	movi	r3,49
    127c:	10c00626 	beq	r2,r3,1298 <main+0x50>
    1280:	00c00c84 	movi	r3,50
    1284:	10c0081e 	bne	r2,r3,12a8 <main+0x60>
  	  case '1':
  		alt_putstr("Player 1 rules\n");
  		playerOnePlay();
  		break;
  	  case '2':
  		alt_putstr("Player 2!\n");
    1288:	01000034 	movhi	r4,0
    128c:	21060604 	addi	r4,r4,6168
    1290:	00014680 	call	1468 <alt_putstr>
  		break;
    1294:	00000406 	br	12a8 <main+0x60>
  int playerNum = getPlayerNum();


  switch (playerNum) {
  	  case '1':
  		alt_putstr("Player 1 rules\n");
    1298:	01000034 	movhi	r4,0
    129c:	21060204 	addi	r4,r4,6152
    12a0:	00014680 	call	1468 <alt_putstr>
  		playerOnePlay();
    12a4:	00011e00 	call	11e0 <playerOnePlay>
	  }

  }*/

  return 0;
}
    12a8:	0005883a 	mov	r2,zero
    12ac:	dfc00017 	ldw	ra,0(sp)
    12b0:	dec00104 	addi	sp,sp,4
    12b4:	f800283a 	ret

000012b8 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    12b8:	00800034 	movhi	r2,0
    12bc:	10860c04 	addi	r2,r2,6192
    12c0:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    12c4:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    12c8:	01000034 	movhi	r4,0
    12cc:	21062204 	addi	r4,r4,6280
    12d0:	d80b883a 	mov	r5,sp
    12d4:	01800044 	movi	r6,1
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    12d8:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    12dc:	00014c80 	call	14c8 <altera_avalon_jtag_uart_read>
    12e0:	0080020e 	bge	zero,r2,12ec <alt_getchar+0x34>
        return -1;
    }
    return c;
    12e4:	d8800007 	ldb	r2,0(sp)
    12e8:	00000106 	br	12f0 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    12ec:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
    12f0:	dfc00117 	ldw	ra,4(sp)
    12f4:	dec00204 	addi	sp,sp,8
    12f8:	f800283a 	ret

000012fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    12fc:	deffff04 	addi	sp,sp,-4
    1300:	01000034 	movhi	r4,0
    1304:	01400034 	movhi	r5,0
    1308:	dfc00015 	stw	ra,0(sp)
    130c:	21060c04 	addi	r4,r4,6192
    1310:	29462804 	addi	r5,r5,6304

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1314:	2140061e 	bne	r4,r5,1330 <alt_load+0x34>
    1318:	01000034 	movhi	r4,0
    131c:	01400034 	movhi	r5,0
    1320:	21040804 	addi	r4,r4,4128
    1324:	29440804 	addi	r5,r5,4128
    1328:	2140141e 	bne	r4,r5,137c <alt_load+0x80>
    132c:	00000d06 	br	1364 <alt_load+0x68>
    1330:	00c00034 	movhi	r3,0
    1334:	18c62804 	addi	r3,r3,6304
    1338:	00bfff04 	movi	r2,-4
    133c:	1907c83a 	sub	r3,r3,r4
    1340:	1886703a 	and	r3,r3,r2
    1344:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1348:	10fff326 	beq	r2,r3,1318 <_gp+0xffff7a90>
    134c:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    1350:	39c00017 	ldw	r7,0(r7)
    1354:	110d883a 	add	r6,r2,r4
    1358:	10800104 	addi	r2,r2,4
    135c:	31c00015 	stw	r7,0(r6)
    1360:	003ff906 	br	1348 <_gp+0xffff7ac0>
    1364:	01000034 	movhi	r4,0
    1368:	01400034 	movhi	r5,0
    136c:	2105da04 	addi	r4,r4,5992
    1370:	2945da04 	addi	r5,r5,5992

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1374:	2140121e 	bne	r4,r5,13c0 <alt_load+0xc4>
    1378:	00000d06 	br	13b0 <alt_load+0xb4>
    137c:	00c00034 	movhi	r3,0
    1380:	18c40804 	addi	r3,r3,4128
    1384:	00bfff04 	movi	r2,-4
    1388:	1907c83a 	sub	r3,r3,r4
    138c:	1886703a 	and	r3,r3,r2
    1390:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1394:	10fff326 	beq	r2,r3,1364 <_gp+0xffff7adc>
    1398:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    139c:	39c00017 	ldw	r7,0(r7)
    13a0:	110d883a 	add	r6,r2,r4
    13a4:	10800104 	addi	r2,r2,4
    13a8:	31c00015 	stw	r7,0(r6)
    13ac:	003ff906 	br	1394 <_gp+0xffff7b0c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    13b0:	00015e00 	call	15e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    13b4:	dfc00017 	ldw	ra,0(sp)
    13b8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    13bc:	00015ec1 	jmpi	15ec <alt_icache_flush_all>
    13c0:	00c00034 	movhi	r3,0
    13c4:	18c60c04 	addi	r3,r3,6192
    13c8:	00bfff04 	movi	r2,-4
    13cc:	1907c83a 	sub	r3,r3,r4
    13d0:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    13d4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    13d8:	10fff526 	beq	r2,r3,13b0 <_gp+0xffff7b28>
    13dc:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    13e0:	39c00017 	ldw	r7,0(r7)
    13e4:	110d883a 	add	r6,r2,r4
    13e8:	10800104 	addi	r2,r2,4
    13ec:	31c00015 	stw	r7,0(r6)
    13f0:	003ff906 	br	13d8 <_gp+0xffff7b50>

000013f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    13f4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    13f8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    13fc:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1400:	00014a40 	call	14a4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1404:	00014c40 	call	14c4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1408:	d1202417 	ldw	r4,-32624(gp)
    140c:	d1602317 	ldw	r5,-32628(gp)
    1410:	d1a02217 	ldw	r6,-32632(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1414:	dfc00017 	ldw	ra,0(sp)
    1418:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    141c:	00012481 	jmpi	1248 <main>

00001420 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    1420:	defffd04 	addi	sp,sp,-12
    1424:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    1428:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    142c:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    1430:	01000034 	movhi	r4,0
    1434:	21062204 	addi	r4,r4,6280
    1438:	d80b883a 	mov	r5,sp
    143c:	01800044 	movi	r6,1
    1440:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    1444:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    1448:	00015240 	call	1524 <altera_avalon_jtag_uart_write>
    144c:	00ffffc4 	movi	r3,-1
    1450:	10c00126 	beq	r2,r3,1458 <alt_putchar+0x38>
        return -1;
    }
    return c;
    1454:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    1458:	dfc00217 	ldw	ra,8(sp)
    145c:	dc000117 	ldw	r16,4(sp)
    1460:	dec00304 	addi	sp,sp,12
    1464:	f800283a 	ret

00001468 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    1468:	defffe04 	addi	sp,sp,-8
    146c:	dc000015 	stw	r16,0(sp)
    1470:	dfc00115 	stw	ra,4(sp)
    1474:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    1478:	00015f80 	call	15f8 <strlen>
    147c:	01000034 	movhi	r4,0
    1480:	21062204 	addi	r4,r4,6280
    1484:	800b883a 	mov	r5,r16
    1488:	100d883a 	mov	r6,r2
    148c:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
    1490:	dfc00117 	ldw	ra,4(sp)
    1494:	dc000017 	ldw	r16,0(sp)
    1498:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    149c:	00015241 	jmpi	1524 <altera_avalon_jtag_uart_write>

000014a0 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    14a0:	00015581 	jmpi	1558 <alt_busy_sleep>

000014a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    14a4:	deffff04 	addi	sp,sp,-4
    14a8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
    14ac:	00015f00 	call	15f0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    14b0:	00800044 	movi	r2,1
    14b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    14b8:	dfc00017 	ldw	ra,0(sp)
    14bc:	dec00104 	addi	sp,sp,4
    14c0:	f800283a 	ret

000014c4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    14c4:	f800283a 	ret

000014c8 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    14c8:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
    14cc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    14d0:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    14d4:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    14d8:	11800b2e 	bgeu	r2,r6,1508 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    14dc:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    14e0:	1a60000c 	andi	r9,r3,32768
    14e4:	48000326 	beq	r9,zero,14f4 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    14e8:	10c00005 	stb	r3,0(r2)
    14ec:	10800044 	addi	r2,r2,1
    14f0:	003ff906 	br	14d8 <_gp+0xffff7c50>
    else if (ptr != buffer)
    14f4:	11400226 	beq	r2,r5,1500 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
    14f8:	1145c83a 	sub	r2,r2,r5
    14fc:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    1500:	403ff526 	beq	r8,zero,14d8 <_gp+0xffff7c50>
    1504:	00000106 	br	150c <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
    1508:	117ffb1e 	bne	r2,r5,14f8 <_gp+0xffff7c70>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    150c:	39d0000c 	andi	r7,r7,16384
    1510:	3800021e 	bne	r7,zero,151c <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
    1514:	00bffec4 	movi	r2,-5
    1518:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    151c:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    1520:	f800283a 	ret

00001524 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1524:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1528:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    152c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1530:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1534:	2980072e 	bgeu	r5,r6,1554 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1538:	38c00037 	ldwio	r3,0(r7)
    153c:	18ffffec 	andhi	r3,r3,65535
    1540:	183ffc26 	beq	r3,zero,1534 <_gp+0xffff7cac>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1544:	28c00007 	ldb	r3,0(r5)
    1548:	20c00035 	stwio	r3,0(r4)
    154c:	29400044 	addi	r5,r5,1
    1550:	003ff806 	br	1534 <_gp+0xffff7cac>

  return count;
}
    1554:	f800283a 	ret

00001558 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1558:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    155c:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1560:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    1564:	dc000015 	stw	r16,0(sp)
    1568:	dfc00115 	stw	ra,4(sp)
    156c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1570:	00017300 	call	1730 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1574:	10001026 	beq	r2,zero,15b8 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1578:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    157c:	013999b4 	movhi	r4,58982
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1580:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1584:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1588:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    158c:	297fffc4 	addi	r5,r5,-1
    1590:	283ffe1e 	bne	r5,zero,158c <_gp+0xffff7d04>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1594:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1598:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    159c:	18bffb16 	blt	r3,r2,158c <_gp+0xffff7d04>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    15a0:	8009883a 	mov	r4,r16
    15a4:	01400144 	movi	r5,5
    15a8:	00017400 	call	1740 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    15ac:	10bfffc4 	addi	r2,r2,-1
    15b0:	103ffe1e 	bne	r2,zero,15ac <_gp+0xffff7d24>
    15b4:	00000506 	br	15cc <alt_busy_sleep+0x74>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    15b8:	8009883a 	mov	r4,r16
    15bc:	01400144 	movi	r5,5
    15c0:	00017400 	call	1740 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    15c4:	10bfffc4 	addi	r2,r2,-1
    15c8:	00bffe16 	blt	zero,r2,15c4 <_gp+0xffff7d3c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    15cc:	0005883a 	mov	r2,zero
    15d0:	dfc00117 	ldw	ra,4(sp)
    15d4:	dc000017 	ldw	r16,0(sp)
    15d8:	dec00204 	addi	sp,sp,8
    15dc:	f800283a 	ret

000015e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    15e0:	f800283a 	ret

000015e4 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    15e4:	3005883a 	mov	r2,r6
    15e8:	f800283a 	ret

000015ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    15ec:	f800283a 	ret

000015f0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    15f0:	000170fa 	wrctl	ienable,zero
    15f4:	f800283a 	ret

000015f8 <strlen>:
    15f8:	2005883a 	mov	r2,r4
    15fc:	10c00007 	ldb	r3,0(r2)
    1600:	18000226 	beq	r3,zero,160c <strlen+0x14>
    1604:	10800044 	addi	r2,r2,1
    1608:	003ffc06 	br	15fc <_gp+0xffff7d74>
    160c:	1105c83a 	sub	r2,r2,r4
    1610:	f800283a 	ret

00001614 <udivmodsi4>:
    1614:	2900182e 	bgeu	r5,r4,1678 <udivmodsi4+0x64>
    1618:	28001716 	blt	r5,zero,1678 <udivmodsi4+0x64>
    161c:	00800804 	movi	r2,32
    1620:	00c00044 	movi	r3,1
    1624:	00000206 	br	1630 <udivmodsi4+0x1c>
    1628:	10001126 	beq	r2,zero,1670 <udivmodsi4+0x5c>
    162c:	28000516 	blt	r5,zero,1644 <udivmodsi4+0x30>
    1630:	294b883a 	add	r5,r5,r5
    1634:	10bfffc4 	addi	r2,r2,-1
    1638:	18c7883a 	add	r3,r3,r3
    163c:	293ffa36 	bltu	r5,r4,1628 <_gp+0xffff7da0>
    1640:	18000b26 	beq	r3,zero,1670 <udivmodsi4+0x5c>
    1644:	0005883a 	mov	r2,zero
    1648:	21400236 	bltu	r4,r5,1654 <udivmodsi4+0x40>
    164c:	2149c83a 	sub	r4,r4,r5
    1650:	10c4b03a 	or	r2,r2,r3
    1654:	1806d07a 	srli	r3,r3,1
    1658:	280ad07a 	srli	r5,r5,1
    165c:	183ffa1e 	bne	r3,zero,1648 <_gp+0xffff7dc0>
    1660:	3000011e 	bne	r6,zero,1668 <udivmodsi4+0x54>
    1664:	f800283a 	ret
    1668:	2005883a 	mov	r2,r4
    166c:	f800283a 	ret
    1670:	0005883a 	mov	r2,zero
    1674:	003ffa06 	br	1660 <_gp+0xffff7dd8>
    1678:	00c00044 	movi	r3,1
    167c:	003ff106 	br	1644 <_gp+0xffff7dbc>

00001680 <__divsi3>:
    1680:	defffe04 	addi	sp,sp,-8
    1684:	dfc00115 	stw	ra,4(sp)
    1688:	dc000015 	stw	r16,0(sp)
    168c:	20000b16 	blt	r4,zero,16bc <__divsi3+0x3c>
    1690:	0021883a 	mov	r16,zero
    1694:	28000c16 	blt	r5,zero,16c8 <__divsi3+0x48>
    1698:	000d883a 	mov	r6,zero
    169c:	00016140 	call	1614 <udivmodsi4>
    16a0:	0407c83a 	sub	r3,zero,r16
    16a4:	1884f03a 	xor	r2,r3,r2
    16a8:	1405883a 	add	r2,r2,r16
    16ac:	dfc00117 	ldw	ra,4(sp)
    16b0:	dc000017 	ldw	r16,0(sp)
    16b4:	dec00204 	addi	sp,sp,8
    16b8:	f800283a 	ret
    16bc:	0109c83a 	sub	r4,zero,r4
    16c0:	04000044 	movi	r16,1
    16c4:	283ff40e 	bge	r5,zero,1698 <_gp+0xffff7e10>
    16c8:	014bc83a 	sub	r5,zero,r5
    16cc:	8400005c 	xori	r16,r16,1
    16d0:	003ff106 	br	1698 <_gp+0xffff7e10>

000016d4 <__modsi3>:
    16d4:	defffd04 	addi	sp,sp,-12
    16d8:	dfc00215 	stw	ra,8(sp)
    16dc:	dc400115 	stw	r17,4(sp)
    16e0:	dc000015 	stw	r16,0(sp)
    16e4:	20000c16 	blt	r4,zero,1718 <__modsi3+0x44>
    16e8:	0023883a 	mov	r17,zero
    16ec:	0021883a 	mov	r16,zero
    16f0:	28000d16 	blt	r5,zero,1728 <__modsi3+0x54>
    16f4:	01800044 	movi	r6,1
    16f8:	00016140 	call	1614 <udivmodsi4>
    16fc:	1404f03a 	xor	r2,r2,r16
    1700:	8885883a 	add	r2,r17,r2
    1704:	dfc00217 	ldw	ra,8(sp)
    1708:	dc400117 	ldw	r17,4(sp)
    170c:	dc000017 	ldw	r16,0(sp)
    1710:	dec00304 	addi	sp,sp,12
    1714:	f800283a 	ret
    1718:	0109c83a 	sub	r4,zero,r4
    171c:	04400044 	movi	r17,1
    1720:	043fffc4 	movi	r16,-1
    1724:	283ff30e 	bge	r5,zero,16f4 <_gp+0xffff7e6c>
    1728:	014bc83a 	sub	r5,zero,r5
    172c:	003ff106 	br	16f4 <_gp+0xffff7e6c>

00001730 <__udivsi3>:
    1730:	000d883a 	mov	r6,zero
    1734:	00016141 	jmpi	1614 <udivmodsi4>

00001738 <__umodsi3>:
    1738:	01800044 	movi	r6,1
    173c:	00016141 	jmpi	1614 <udivmodsi4>

00001740 <__mulsi3>:
    1740:	0005883a 	mov	r2,zero
    1744:	20000726 	beq	r4,zero,1764 <__mulsi3+0x24>
    1748:	20c0004c 	andi	r3,r4,1
    174c:	2008d07a 	srli	r4,r4,1
    1750:	18000126 	beq	r3,zero,1758 <__mulsi3+0x18>
    1754:	1145883a 	add	r2,r2,r5
    1758:	294b883a 	add	r5,r5,r5
    175c:	203ffa1e 	bne	r4,zero,1748 <_gp+0xffff7ec0>
    1760:	f800283a 	ret
    1764:	f800283a 	ret
