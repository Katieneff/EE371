
microproc.elf:     file format elf32-littlenios2
microproc.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000604 memsz 0x00000604 flags r-x
    LOAD off    0x00001624 vaddr 0x00001624 paddr 0x00001694 align 2**12
         filesz 0x00000070 memsz 0x00000070 flags rw-
    LOAD off    0x00001704 vaddr 0x00001704 paddr 0x00001704 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  00001694  2**0
                  CONTENTS
  2 .text         000005c8  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000003c  000015e8  000015e8  000015e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000070  00001624  00001694  00001624  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00001704  00001704  00001704  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00001710  00001710  00001694  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000250  00000000  00000000  000016b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001a3b  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000c74  00000000  00000000  00003343  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000d0d  00000000  00000000  00003fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000328  00000000  00000000  00004cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000009b6  00000000  00000000  00004fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000059b  00000000  00000000  000059a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00005f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000b0  00000000  00000000  00005f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00007079  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00007081  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00007082  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00007083  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00007095  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000e  00000000  00000000  0000709e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000020  00000000  00000000  000070ac  2**0
                  CONTENTS, READONLY
 26 .jdi          00005248  00000000  00000000  000070cc  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00050bc5  00000000  00000000  0000c314  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
000015e8 l    d  .rodata	00000000 .rodata
00001624 l    d  .rwdata	00000000 .rwdata
00001704 l    d  .bss	00000000 .bss
00001710 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../microproc_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001464 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00001494 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
000012bc g     F .text	0000002c alt_main
00001694 g       *ABS*	00000000 __flash_rwdata_start
000012e8 g     F .text	00000038 alt_putstr
0000167c g     O .rwdata	00000004 jtag_uart
00001470 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001708 g     O .bss	00000004 alt_argv
0000967c g       *ABS*	00000000 _gp
00001320 g     F .text	00000004 usleep
00001624 g     O .rwdata	00000030 alt_fd_list
00001348 g     F .text	0000005c altera_avalon_jtag_uart_read
000015b0 g     F .text	00000008 .hidden __udivsi3
00001680 g     O .rwdata	00000004 alt_max_fd
00001710 g       *ABS*	00000000 __bss_end
00001180 g     F .text	00000044 alt_getchar
0000105c g     F .text	00000080 send
00001654 g     O .rwdata	00000028 alt_dev_null
00001460 g     F .text	00000004 alt_dcache_flush_all
00001694 g       *ABS*	00000000 __ram_rwdata_end
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory
00001684 g     O .rwdata	00000008 alt_dev_list
00001624 g       *ABS*	00000000 __ram_rodata_end
000015b8 g     F .text	00000008 .hidden __umodsi3
00001710 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
000013a4 g     F .text	00000034 altera_avalon_jtag_uart_write
00001020 g     F .text	0000003c _start
00001344 g     F .text	00000004 alt_sys_init
000015c0 g     F .text	00000028 .hidden __mulsi3
00001624 g       *ABS*	00000000 __ram_rwdata_start
000015e8 g       *ABS*	00000000 __ram_rodata_start
000013d8 g     F .text	00000088 alt_busy_sleep
00001710 g       *ABS*	00000000 __alt_stack_base
00001704 g       *ABS*	00000000 __bss_start
000010dc g     F .text	000000a4 main
00001704 g     O .bss	00000004 alt_envp
00001500 g     F .text	00000054 .hidden __divsi3
000015e8 g       *ABS*	00000000 __flash_rodata_start
00001324 g     F .text	00000020 alt_irq_init
0000170c g     O .bss	00000004 alt_argc
0000168c g     O .rwdata	00000008 alt_fs_list
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001694 g       *ABS*	00000000 _edata
00001710 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
00001554 g     F .text	0000005c .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
00001478 g     F .text	0000001c strlen
0000146c g     F .text	00000004 alt_icache_flush_all
000011c4 g     F .text	000000f8 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a59f14 	ori	gp,gp,38524
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	1085c114 	ori	r2,r2,5892

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c5c414 	ori	r3,r3,5904

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_gp+0xffff79c8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00011c40 	call	11c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00012bc0 	call	12bc <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <_gp+0xffff79dc>

0000105c <send>:

  return 0;
}


int send(int * str) {
    105c:	defffc04 	addi	sp,sp,-16
    1060:	dc800215 	stw	r18,8(sp)
    1064:	dc400115 	stw	r17,4(sp)
    1068:	dc000015 	stw	r16,0(sp)
    106c:	dfc00315 	stw	ra,12(sp)
	*data_bus_out = str;
    1070:	0005883a 	mov	r2,zero
    1074:	11000005 	stb	r4,0(r2)
	*transmit_enable = 0;
    1078:	040c0c04 	movi	r16,12336
	*load = 1;
    107c:	048c0004 	movi	r18,12288
}


int send(int * str) {
	*data_bus_out = str;
	*transmit_enable = 0;
    1080:	80000005 	stb	zero,0(r16)
	*load = 1;
    1084:	04400044 	movi	r17,1
    1088:	94400005 	stb	r17,0(r18)
	usleep(10);
    108c:	01000284 	movi	r4,10
    1090:	00013200 	call	1320 <usleep>
	*load = 0;
    1094:	90000005 	stb	zero,0(r18)
	while (!*character_sent) {
    1098:	048c0804 	movi	r18,12320
    109c:	90800003 	ldbu	r2,0(r18)
    10a0:	10803fcc 	andi	r2,r2,255
    10a4:	1080201c 	xori	r2,r2,128
    10a8:	10bfe004 	addi	r2,r2,-128
    10ac:	1000031e 	bne	r2,zero,10bc <send+0x60>
		usleep(1);
    10b0:	01000044 	movi	r4,1
    10b4:	00013200 	call	1320 <usleep>
    10b8:	003ff806 	br	109c <_gp+0xffff7a20>
	}
	*transmit_enable = 1;
	return 0;

}
    10bc:	0005883a 	mov	r2,zero
	usleep(10);
	*load = 0;
	while (!*character_sent) {
		usleep(1);
	}
	*transmit_enable = 1;
    10c0:	84400005 	stb	r17,0(r16)
	return 0;

}
    10c4:	dfc00317 	ldw	ra,12(sp)
    10c8:	dc800217 	ldw	r18,8(sp)
    10cc:	dc400117 	ldw	r17,4(sp)
    10d0:	dc000017 	ldw	r16,0(sp)
    10d4:	dec00404 	addi	sp,sp,16
    10d8:	f800283a 	ret

000010dc <main>:
int send (int* str);


int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    10dc:	01000034 	movhi	r4,0

int send (int* str);


int main()
{ 
    10e0:	defffb04 	addi	sp,sp,-20
  alt_putstr("Hello from Nios II!\n");
    10e4:	21057a04 	addi	r4,r4,5608

int send (int* str);


int main()
{ 
    10e8:	dfc00415 	stw	ra,16(sp)
    10ec:	dcc00315 	stw	r19,12(sp)
    10f0:	dc800215 	stw	r18,8(sp)
    10f4:	dc400115 	stw	r17,4(sp)
    10f8:	dc000015 	stw	r16,0(sp)
  alt_putstr("Hello from Nios II!\n");
    10fc:	00012e80 	call	12e8 <alt_putstr>
  alt_putstr("Welcome to Battleship!\n");
    1100:	01000034 	movhi	r4,0
    1104:	21058004 	addi	r4,r4,5632
    1108:	00012e80 	call	12e8 <alt_putstr>
  /* Event loop never exits. */


   int character;

   character = alt_getchar();
    110c:	00011800 	call	1180 <alt_getchar>


   *data_bus_out = character;
    1110:	0007883a 	mov	r3,zero
    1114:	18800005 	stb	r2,0(r3)




   *load = 1;
    1118:	040c0004 	movi	r16,12288
    111c:	04400044 	movi	r17,1
    1120:	84400005 	stb	r17,0(r16)
   usleep(100);
    1124:	01001904 	movi	r4,100
    1128:	00013200 	call	1320 <usleep>
   *load = 0;
   *transmit_enable = 0;
    112c:	008c0c04 	movi	r2,12336



   *load = 1;
   usleep(100);
   *load = 0;
    1130:	80000005 	stb	zero,0(r16)
   *transmit_enable = 0;
    1134:	10000005 	stb	zero,0(r2)
   while (1){
 	 if (*character_sent){
    1138:	048c0804 	movi	r18,12320
 		 usleep(100);

 		 character = alt_getchar();
 		 while (character == '\n') {
    113c:	04c00284 	movi	r19,10
   *load = 1;
   usleep(100);
   *load = 0;
   *transmit_enable = 0;
   while (1){
 	 if (*character_sent){
    1140:	90800003 	ldbu	r2,0(r18)
    1144:	10803fcc 	andi	r2,r2,255
    1148:	1080201c 	xori	r2,r2,128
    114c:	10bfe004 	addi	r2,r2,-128
    1150:	103ffb26 	beq	r2,zero,1140 <_gp+0xffff7ac4>
 		 usleep(100);
    1154:	01001904 	movi	r4,100
    1158:	00013200 	call	1320 <usleep>

 		 character = alt_getchar();
 		 while (character == '\n') {
 			 character = alt_getchar();
    115c:	00011800 	call	1180 <alt_getchar>
   while (1){
 	 if (*character_sent){
 		 usleep(100);

 		 character = alt_getchar();
 		 while (character == '\n') {
    1160:	14fffe26 	beq	r2,r19,115c <_gp+0xffff7ae0>
 			 character = alt_getchar();
 		 }
 		 *data_bus_out = character;
    1164:	0007883a 	mov	r3,zero
    1168:	18800005 	stb	r2,0(r3)
 		 *load = 1;
    116c:	84400005 	stb	r17,0(r16)
 		  usleep(10000);
    1170:	0109c404 	movi	r4,10000
    1174:	00013200 	call	1320 <usleep>

 		 *load = 0;
    1178:	80000005 	stb	zero,0(r16)
    117c:	003ff006 	br	1140 <_gp+0xffff7ac4>

00001180 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    1180:	00800034 	movhi	r2,0
    1184:	10858904 	addi	r2,r2,5668
    1188:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    118c:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    1190:	01000034 	movhi	r4,0
    1194:	21059f04 	addi	r4,r4,5756
    1198:	d80b883a 	mov	r5,sp
    119c:	01800044 	movi	r6,1
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    11a0:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    11a4:	00013480 	call	1348 <altera_avalon_jtag_uart_read>
    11a8:	0080020e 	bge	zero,r2,11b4 <alt_getchar+0x34>
        return -1;
    }
    return c;
    11ac:	d8800007 	ldb	r2,0(sp)
    11b0:	00000106 	br	11b8 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    11b4:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
    11b8:	dfc00117 	ldw	ra,4(sp)
    11bc:	dec00204 	addi	sp,sp,8
    11c0:	f800283a 	ret

000011c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    11c4:	deffff04 	addi	sp,sp,-4
    11c8:	01000034 	movhi	r4,0
    11cc:	01400034 	movhi	r5,0
    11d0:	dfc00015 	stw	ra,0(sp)
    11d4:	21058904 	addi	r4,r4,5668
    11d8:	2945a504 	addi	r5,r5,5780

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    11dc:	2140061e 	bne	r4,r5,11f8 <alt_load+0x34>
    11e0:	01000034 	movhi	r4,0
    11e4:	01400034 	movhi	r5,0
    11e8:	21040804 	addi	r4,r4,4128
    11ec:	29440804 	addi	r5,r5,4128
    11f0:	2140141e 	bne	r4,r5,1244 <alt_load+0x80>
    11f4:	00000d06 	br	122c <alt_load+0x68>
    11f8:	00c00034 	movhi	r3,0
    11fc:	18c5a504 	addi	r3,r3,5780
    1200:	00bfff04 	movi	r2,-4
    1204:	1907c83a 	sub	r3,r3,r4
    1208:	1886703a 	and	r3,r3,r2
    120c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1210:	10fff326 	beq	r2,r3,11e0 <_gp+0xffff7b64>
    1214:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    1218:	39c00017 	ldw	r7,0(r7)
    121c:	110d883a 	add	r6,r2,r4
    1220:	10800104 	addi	r2,r2,4
    1224:	31c00015 	stw	r7,0(r6)
    1228:	003ff906 	br	1210 <_gp+0xffff7b94>
    122c:	01000034 	movhi	r4,0
    1230:	01400034 	movhi	r5,0
    1234:	21057a04 	addi	r4,r4,5608
    1238:	29457a04 	addi	r5,r5,5608

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    123c:	2140121e 	bne	r4,r5,1288 <alt_load+0xc4>
    1240:	00000d06 	br	1278 <alt_load+0xb4>
    1244:	00c00034 	movhi	r3,0
    1248:	18c40804 	addi	r3,r3,4128
    124c:	00bfff04 	movi	r2,-4
    1250:	1907c83a 	sub	r3,r3,r4
    1254:	1886703a 	and	r3,r3,r2
    1258:	0005883a 	mov	r2,zero
  {
    while( to != end )
    125c:	10fff326 	beq	r2,r3,122c <_gp+0xffff7bb0>
    1260:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    1264:	39c00017 	ldw	r7,0(r7)
    1268:	110d883a 	add	r6,r2,r4
    126c:	10800104 	addi	r2,r2,4
    1270:	31c00015 	stw	r7,0(r6)
    1274:	003ff906 	br	125c <_gp+0xffff7be0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1278:	00014600 	call	1460 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    127c:	dfc00017 	ldw	ra,0(sp)
    1280:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    1284:	000146c1 	jmpi	146c <alt_icache_flush_all>
    1288:	00c00034 	movhi	r3,0
    128c:	18c58904 	addi	r3,r3,5668
    1290:	00bfff04 	movi	r2,-4
    1294:	1907c83a 	sub	r3,r3,r4
    1298:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    129c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    12a0:	10fff526 	beq	r2,r3,1278 <_gp+0xffff7bfc>
    12a4:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
    12a8:	39c00017 	ldw	r7,0(r7)
    12ac:	110d883a 	add	r6,r2,r4
    12b0:	10800104 	addi	r2,r2,4
    12b4:	31c00015 	stw	r7,0(r6)
    12b8:	003ff906 	br	12a0 <_gp+0xffff7c24>

000012bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    12bc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    12c0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    12c4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    12c8:	00013240 	call	1324 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    12cc:	00013440 	call	1344 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    12d0:	d1202417 	ldw	r4,-32624(gp)
    12d4:	d1602317 	ldw	r5,-32628(gp)
    12d8:	d1a02217 	ldw	r6,-32632(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    12dc:	dfc00017 	ldw	ra,0(sp)
    12e0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    12e4:	00010dc1 	jmpi	10dc <main>

000012e8 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    12e8:	defffe04 	addi	sp,sp,-8
    12ec:	dc000015 	stw	r16,0(sp)
    12f0:	dfc00115 	stw	ra,4(sp)
    12f4:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    12f8:	00014780 	call	1478 <strlen>
    12fc:	01000034 	movhi	r4,0
    1300:	21059f04 	addi	r4,r4,5756
    1304:	800b883a 	mov	r5,r16
    1308:	100d883a 	mov	r6,r2
    130c:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
#endif
}
    1310:	dfc00117 	ldw	ra,4(sp)
    1314:	dc000017 	ldw	r16,0(sp)
    1318:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    131c:	00013a41 	jmpi	13a4 <altera_avalon_jtag_uart_write>

00001320 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    1320:	00013d81 	jmpi	13d8 <alt_busy_sleep>

00001324 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1324:	deffff04 	addi	sp,sp,-4
    1328:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
    132c:	00014700 	call	1470 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1330:	00800044 	movi	r2,1
    1334:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1338:	dfc00017 	ldw	ra,0(sp)
    133c:	dec00104 	addi	sp,sp,4
    1340:	f800283a 	ret

00001344 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1344:	f800283a 	ret

00001348 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    1348:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
    134c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    1350:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    1354:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    1358:	11800b2e 	bgeu	r2,r6,1388 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    135c:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    1360:	1a60000c 	andi	r9,r3,32768
    1364:	48000326 	beq	r9,zero,1374 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    1368:	10c00005 	stb	r3,0(r2)
    136c:	10800044 	addi	r2,r2,1
    1370:	003ff906 	br	1358 <_gp+0xffff7cdc>
    else if (ptr != buffer)
    1374:	11400226 	beq	r2,r5,1380 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
    1378:	1145c83a 	sub	r2,r2,r5
    137c:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    1380:	403ff526 	beq	r8,zero,1358 <_gp+0xffff7cdc>
    1384:	00000106 	br	138c <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
    1388:	117ffb1e 	bne	r2,r5,1378 <_gp+0xffff7cfc>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    138c:	39d0000c 	andi	r7,r7,16384
    1390:	3800021e 	bne	r7,zero,139c <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
    1394:	00bffec4 	movi	r2,-5
    1398:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    139c:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    13a0:	f800283a 	ret

000013a4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    13a4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    13a8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    13ac:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    13b0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    13b4:	2980072e 	bgeu	r5,r6,13d4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    13b8:	38c00037 	ldwio	r3,0(r7)
    13bc:	18ffffec 	andhi	r3,r3,65535
    13c0:	183ffc26 	beq	r3,zero,13b4 <_gp+0xffff7d38>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    13c4:	28c00007 	ldb	r3,0(r5)
    13c8:	20c00035 	stwio	r3,0(r4)
    13cc:	29400044 	addi	r5,r5,1
    13d0:	003ff806 	br	13b4 <_gp+0xffff7d38>

  return count;
}
    13d4:	f800283a 	ret

000013d8 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    13d8:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    13dc:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    13e0:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    13e4:	dc000015 	stw	r16,0(sp)
    13e8:	dfc00115 	stw	ra,4(sp)
    13ec:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    13f0:	00015b00 	call	15b0 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    13f4:	10001026 	beq	r2,zero,1438 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    13f8:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    13fc:	013999b4 	movhi	r4,58982
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1400:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1404:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1408:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    140c:	297fffc4 	addi	r5,r5,-1
    1410:	283ffe1e 	bne	r5,zero,140c <_gp+0xffff7d90>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1414:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1418:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    141c:	18bffb16 	blt	r3,r2,140c <_gp+0xffff7d90>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    1420:	8009883a 	mov	r4,r16
    1424:	01400144 	movi	r5,5
    1428:	00015c00 	call	15c0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    142c:	10bfffc4 	addi	r2,r2,-1
    1430:	103ffe1e 	bne	r2,zero,142c <_gp+0xffff7db0>
    1434:	00000506 	br	144c <alt_busy_sleep+0x74>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    1438:	8009883a 	mov	r4,r16
    143c:	01400144 	movi	r5,5
    1440:	00015c00 	call	15c0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1444:	10bfffc4 	addi	r2,r2,-1
    1448:	00bffe16 	blt	zero,r2,1444 <_gp+0xffff7dc8>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    144c:	0005883a 	mov	r2,zero
    1450:	dfc00117 	ldw	ra,4(sp)
    1454:	dc000017 	ldw	r16,0(sp)
    1458:	dec00204 	addi	sp,sp,8
    145c:	f800283a 	ret

00001460 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1460:	f800283a 	ret

00001464 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    1464:	3005883a 	mov	r2,r6
    1468:	f800283a 	ret

0000146c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    146c:	f800283a 	ret

00001470 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1470:	000170fa 	wrctl	ienable,zero
    1474:	f800283a 	ret

00001478 <strlen>:
    1478:	2005883a 	mov	r2,r4
    147c:	10c00007 	ldb	r3,0(r2)
    1480:	18000226 	beq	r3,zero,148c <strlen+0x14>
    1484:	10800044 	addi	r2,r2,1
    1488:	003ffc06 	br	147c <_gp+0xffff7e00>
    148c:	1105c83a 	sub	r2,r2,r4
    1490:	f800283a 	ret

00001494 <udivmodsi4>:
    1494:	2900182e 	bgeu	r5,r4,14f8 <udivmodsi4+0x64>
    1498:	28001716 	blt	r5,zero,14f8 <udivmodsi4+0x64>
    149c:	00800804 	movi	r2,32
    14a0:	00c00044 	movi	r3,1
    14a4:	00000206 	br	14b0 <udivmodsi4+0x1c>
    14a8:	10001126 	beq	r2,zero,14f0 <udivmodsi4+0x5c>
    14ac:	28000516 	blt	r5,zero,14c4 <udivmodsi4+0x30>
    14b0:	294b883a 	add	r5,r5,r5
    14b4:	10bfffc4 	addi	r2,r2,-1
    14b8:	18c7883a 	add	r3,r3,r3
    14bc:	293ffa36 	bltu	r5,r4,14a8 <_gp+0xffff7e2c>
    14c0:	18000b26 	beq	r3,zero,14f0 <udivmodsi4+0x5c>
    14c4:	0005883a 	mov	r2,zero
    14c8:	21400236 	bltu	r4,r5,14d4 <udivmodsi4+0x40>
    14cc:	2149c83a 	sub	r4,r4,r5
    14d0:	10c4b03a 	or	r2,r2,r3
    14d4:	1806d07a 	srli	r3,r3,1
    14d8:	280ad07a 	srli	r5,r5,1
    14dc:	183ffa1e 	bne	r3,zero,14c8 <_gp+0xffff7e4c>
    14e0:	3000011e 	bne	r6,zero,14e8 <udivmodsi4+0x54>
    14e4:	f800283a 	ret
    14e8:	2005883a 	mov	r2,r4
    14ec:	f800283a 	ret
    14f0:	0005883a 	mov	r2,zero
    14f4:	003ffa06 	br	14e0 <_gp+0xffff7e64>
    14f8:	00c00044 	movi	r3,1
    14fc:	003ff106 	br	14c4 <_gp+0xffff7e48>

00001500 <__divsi3>:
    1500:	defffe04 	addi	sp,sp,-8
    1504:	dfc00115 	stw	ra,4(sp)
    1508:	dc000015 	stw	r16,0(sp)
    150c:	20000b16 	blt	r4,zero,153c <__divsi3+0x3c>
    1510:	0021883a 	mov	r16,zero
    1514:	28000c16 	blt	r5,zero,1548 <__divsi3+0x48>
    1518:	000d883a 	mov	r6,zero
    151c:	00014940 	call	1494 <udivmodsi4>
    1520:	0407c83a 	sub	r3,zero,r16
    1524:	1884f03a 	xor	r2,r3,r2
    1528:	1405883a 	add	r2,r2,r16
    152c:	dfc00117 	ldw	ra,4(sp)
    1530:	dc000017 	ldw	r16,0(sp)
    1534:	dec00204 	addi	sp,sp,8
    1538:	f800283a 	ret
    153c:	0109c83a 	sub	r4,zero,r4
    1540:	04000044 	movi	r16,1
    1544:	283ff40e 	bge	r5,zero,1518 <_gp+0xffff7e9c>
    1548:	014bc83a 	sub	r5,zero,r5
    154c:	8400005c 	xori	r16,r16,1
    1550:	003ff106 	br	1518 <_gp+0xffff7e9c>

00001554 <__modsi3>:
    1554:	defffd04 	addi	sp,sp,-12
    1558:	dfc00215 	stw	ra,8(sp)
    155c:	dc400115 	stw	r17,4(sp)
    1560:	dc000015 	stw	r16,0(sp)
    1564:	20000c16 	blt	r4,zero,1598 <__modsi3+0x44>
    1568:	0023883a 	mov	r17,zero
    156c:	0021883a 	mov	r16,zero
    1570:	28000d16 	blt	r5,zero,15a8 <__modsi3+0x54>
    1574:	01800044 	movi	r6,1
    1578:	00014940 	call	1494 <udivmodsi4>
    157c:	1404f03a 	xor	r2,r2,r16
    1580:	8885883a 	add	r2,r17,r2
    1584:	dfc00217 	ldw	ra,8(sp)
    1588:	dc400117 	ldw	r17,4(sp)
    158c:	dc000017 	ldw	r16,0(sp)
    1590:	dec00304 	addi	sp,sp,12
    1594:	f800283a 	ret
    1598:	0109c83a 	sub	r4,zero,r4
    159c:	04400044 	movi	r17,1
    15a0:	043fffc4 	movi	r16,-1
    15a4:	283ff30e 	bge	r5,zero,1574 <_gp+0xffff7ef8>
    15a8:	014bc83a 	sub	r5,zero,r5
    15ac:	003ff106 	br	1574 <_gp+0xffff7ef8>

000015b0 <__udivsi3>:
    15b0:	000d883a 	mov	r6,zero
    15b4:	00014941 	jmpi	1494 <udivmodsi4>

000015b8 <__umodsi3>:
    15b8:	01800044 	movi	r6,1
    15bc:	00014941 	jmpi	1494 <udivmodsi4>

000015c0 <__mulsi3>:
    15c0:	0005883a 	mov	r2,zero
    15c4:	20000726 	beq	r4,zero,15e4 <__mulsi3+0x24>
    15c8:	20c0004c 	andi	r3,r4,1
    15cc:	2008d07a 	srli	r4,r4,1
    15d0:	18000126 	beq	r3,zero,15d8 <__mulsi3+0x18>
    15d4:	1145883a 	add	r2,r2,r5
    15d8:	294b883a 	add	r5,r5,r5
    15dc:	203ffa1e 	bne	r4,zero,15c8 <_gp+0xffff7f4c>
    15e0:	f800283a 	ret
    15e4:	f800283a 	ret
