
battleship.elf:     file format elf32-littlenios2
battleship.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000e30 memsz 0x00000e30 flags r-x
    LOAD off    0x00001e50 vaddr 0x00001e50 paddr 0x00001ec0 align 2**12
         filesz 0x00000070 memsz 0x00000070 flags rw-
    LOAD off    0x00001f30 vaddr 0x00001f30 paddr 0x00001f30 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  00001ec0  2**0
                  CONTENTS
  2 .text         00000d1c  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000114  00001d3c  00001d3c  00001d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000070  00001e50  00001ec0  00001e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00001f30  00001f30  00001f30  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00001f3c  00001f3c  00001ec0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001ec0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000290  00000000  00000000  00001ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00002233  00000000  00000000  00002178  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ea1  00000000  00000000  000043ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000fbf  00000000  00000000  0000524c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003fc  00000000  00000000  0000620c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000b0c  00000000  00000000  00006608  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d92  00000000  00000000  00007114  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00007ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000128  00000000  00000000  00007ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00009106  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00009109  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000910e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000910f  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00009110  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00009119  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00009122  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000e  00000000  00000000  0000912b  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000020  00000000  00000000  00009139  2**0
                  CONTENTS, READONLY
 26 .jdi          000040b5  00000000  00000000  00009159  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00050ec9  00000000  00000000  0000d20e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
00001d3c l    d  .rodata	00000000 .rodata
00001e50 l    d  .rwdata	00000000 .rwdata
00001f30 l    d  .bss	00000000 .bss
00001f3c l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../battleship_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001b58 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000017f8 g     F .text	0000002c alt_main
00001ec0 g       *ABS*	00000000 __flash_rwdata_start
0000110c g     F .text	00000084 getCoordinates
00001190 g     F .text	000000b8 receiveNum
000019dc g     F .text	00000038 alt_putstr
00001ea8 g     O .rwdata	00000004 jtag_uart
00001b64 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001f34 g     O .bss	00000004 alt_argv
00009ea8 g       *ABS*	00000000 _gp
00001a14 g     F .text	00000004 usleep
00001e50 g     O .rwdata	00000030 alt_fd_list
00001a3c g     F .text	0000005c altera_avalon_jtag_uart_read
00001c80 g     F .text	00000064 .hidden __udivsi3
00001eac g     O .rwdata	00000004 alt_max_fd
00001f3c g       *ABS*	00000000 __bss_end
000016d4 g     F .text	00000044 alt_getchar
00001094 g     F .text	00000078 send
00001e80 g     O .rwdata	00000028 alt_dev_null
00001b54 g     F .text	00000004 alt_dcache_flush_all
00001ec0 g       *ABS*	00000000 __ram_rwdata_end
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory
00001eb0 g     O .rwdata	00000008 alt_dev_list
00001e50 g       *ABS*	00000000 __ram_rodata_end
00001ce4 g     F .text	00000058 .hidden __umodsi3
00001f3c g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001a98 g     F .text	00000034 altera_avalon_jtag_uart_write
00001824 g     F .text	00000170 alt_printf
00001020 g     F .text	0000003c _start
00001a38 g     F .text	00000004 alt_sys_init
000016ac g     F .text	00000028 .hidden __mulsi3
00001e50 g       *ABS*	00000000 __ram_rwdata_start
00001d3c g       *ABS*	00000000 __ram_rodata_start
00001acc g     F .text	00000088 alt_busy_sleep
00001f3c g       *ABS*	00000000 __alt_stack_base
00001f30 g       *ABS*	00000000 __bss_start
000012e4 g     F .text	000003c8 main
00001f30 g     O .bss	00000004 alt_envp
00001248 g     F .text	0000009c receiveChar
00001b88 g     F .text	00000084 .hidden __divsi3
00001d3c g       *ABS*	00000000 __flash_rodata_start
00001a18 g     F .text	00000020 alt_irq_init
00001f38 g     O .bss	00000004 alt_argc
00001eb8 g     O .rwdata	00000008 alt_fs_list
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001ec0 g       *ABS*	00000000 _edata
00001f3c g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
0000105c g     F .text	00000038 getPlayerNum
00001c0c g     F .text	00000074 .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
00001b6c g     F .text	0000001c strlen
00001994 g     F .text	00000048 alt_putchar
00001b60 g     F .text	00000004 alt_icache_flush_all
00001718 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a7aa14 	ori	gp,gp,40616
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	1087cc14 	ori	r2,r2,7984

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c7cf14 	ori	r3,r3,7996

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_gp+0xffff719c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00017180 	call	1718 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00017f80 	call	17f8 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <_gp+0xffff71b0>

0000105c <getPlayerNum>:
	} while (counter < 17);
	return 0;
}

int getPlayerNum() {
	alt_putstr("Are you player 1 or player 2? \n");
    105c:	01000034 	movhi	r4,0

	} while (counter < 17);
	return 0;
}

int getPlayerNum() {
    1060:	deffff04 	addi	sp,sp,-4
	alt_putstr("Are you player 1 or player 2? \n");
    1064:	21074f04 	addi	r4,r4,7484

	} while (counter < 17);
	return 0;
}

int getPlayerNum() {
    1068:	dfc00015 	stw	ra,0(sp)
	alt_putstr("Are you player 1 or player 2? \n");
    106c:	00019dc0 	call	19dc <alt_putstr>
	int num = alt_getchar();
    1070:	00016d40 	call	16d4 <alt_getchar>
	if (num == '\n') {
    1074:	00c00284 	movi	r3,10
    1078:	10c0031e 	bne	r2,r3,1088 <getPlayerNum+0x2c>
		num = alt_getchar();
	}

	return num;
}
    107c:	dfc00017 	ldw	ra,0(sp)
    1080:	dec00104 	addi	sp,sp,4

int getPlayerNum() {
	alt_putstr("Are you player 1 or player 2? \n");
	int num = alt_getchar();
	if (num == '\n') {
		num = alt_getchar();
    1084:	00016d41 	jmpi	16d4 <alt_getchar>
	}

	return num;
}
    1088:	dfc00017 	ldw	ra,0(sp)
    108c:	dec00104 	addi	sp,sp,4
    1090:	f800283a 	ret

00001094 <send>:
	k = k - 48;
	send(h);
	send(k);
}

int send(unsigned int str) {
    1094:	defffe04 	addi	sp,sp,-8
    1098:	dc000015 	stw	r16,0(sp)
    109c:	2021883a 	mov	r16,r4
	alt_putstr("send!\n");
    10a0:	01000034 	movhi	r4,0
    10a4:	21075704 	addi	r4,r4,7516
	k = k - 48;
	send(h);
	send(k);
}

int send(unsigned int str) {
    10a8:	dfc00115 	stw	ra,4(sp)
	alt_putstr("send!\n");
    10ac:	00019dc0 	call	19dc <alt_putstr>
	*data_bus_out = str;
    10b0:	0005883a 	mov	r2,zero
    10b4:	14000005 	stb	r16,0(r2)
	*transmit_enable = 0;
    10b8:	008c0c04 	movi	r2,12336
    10bc:	10000005 	stb	zero,0(r2)
	*load = 1;
    10c0:	040c0004 	movi	r16,12288
    10c4:	00800044 	movi	r2,1
    10c8:	80800005 	stb	r2,0(r16)
	usleep(100);
    10cc:	01001904 	movi	r4,100
    10d0:	0001a140 	call	1a14 <usleep>
	*load = 0;
	while (1) {
		if (*character_sent) {
    10d4:	00cc0804 	movi	r3,12320
	alt_putstr("send!\n");
	*data_bus_out = str;
	*transmit_enable = 0;
	*load = 1;
	usleep(100);
	*load = 0;
    10d8:	80000005 	stb	zero,0(r16)
	while (1) {
		if (*character_sent) {
    10dc:	18800003 	ldbu	r2,0(r3)
    10e0:	10803fcc 	andi	r2,r2,255
    10e4:	1080201c 	xori	r2,r2,128
    10e8:	10bfe004 	addi	r2,r2,-128
    10ec:	103ffb26 	beq	r2,zero,10dc <_gp+0xffff7234>
			usleep(100);
    10f0:	01001904 	movi	r4,100
    10f4:	0001a140 	call	1a14 <usleep>
		}
	}

	return 0;

}
    10f8:	0005883a 	mov	r2,zero
    10fc:	dfc00117 	ldw	ra,4(sp)
    1100:	dc000017 	ldw	r16,0(sp)
    1104:	dec00204 	addi	sp,sp,8
    1108:	f800283a 	ret

0000110c <getCoordinates>:
	unsigned int h, k;

//	 the following alt_putstr asks and stores
//	 players input

	alt_putstr("> Enter Target:\n");
    110c:	01000034 	movhi	r4,0
	}

	return num;
}

void getCoordinates() {
    1110:	defffc04 	addi	sp,sp,-16
	unsigned int h, k;

//	 the following alt_putstr asks and stores
//	 players input

	alt_putstr("> Enter Target:\n");
    1114:	21075904 	addi	r4,r4,7524
	}

	return num;
}

void getCoordinates() {
    1118:	dfc00315 	stw	ra,12(sp)
    111c:	dc800215 	stw	r18,8(sp)
    1120:	dc400115 	stw	r17,4(sp)
    1124:	dc000015 	stw	r16,0(sp)
	unsigned int h, k;

//	 the following alt_putstr asks and stores
//	 players input

	alt_putstr("> Enter Target:\n");
    1128:	00019dc0 	call	19dc <alt_putstr>
	alt_putstr("> Enter longitude: ");
    112c:	01000034 	movhi	r4,0
    1130:	21075e04 	addi	r4,r4,7544
    1134:	00019dc0 	call	19dc <alt_putstr>
	h = alt_getchar();
    1138:	00016d40 	call	16d4 <alt_getchar>
	if (h == '\n') {
    113c:	04800284 	movi	r18,10
    1140:	1480011e 	bne	r2,r18,1148 <getCoordinates+0x3c>
		h = alt_getchar();
    1144:	00016d40 	call	16d4 <alt_getchar>
	}
	h = h - 48;

	alt_putstr("> Enter latitude: ");
    1148:	01000034 	movhi	r4,0
    114c:	21076304 	addi	r4,r4,7564
	alt_putstr("> Enter longitude: ");
	h = alt_getchar();
	if (h == '\n') {
		h = alt_getchar();
	}
	h = h - 48;
    1150:	143ff404 	addi	r16,r2,-48

	alt_putstr("> Enter latitude: ");
    1154:	00019dc0 	call	19dc <alt_putstr>
	k = alt_getchar();
    1158:	00016d40 	call	16d4 <alt_getchar>
    115c:	1023883a 	mov	r17,r2
	if (k == '\n') {
    1160:	1480021e 	bne	r2,r18,116c <getCoordinates+0x60>
		k = alt_getchar();
    1164:	00016d40 	call	16d4 <alt_getchar>
    1168:	1023883a 	mov	r17,r2
	}
	k = k - 48;
	send(h);
    116c:	8009883a 	mov	r4,r16
    1170:	00010940 	call	1094 <send>
	send(k);
    1174:	893ff404 	addi	r4,r17,-48
}
    1178:	dfc00317 	ldw	ra,12(sp)
    117c:	dc800217 	ldw	r18,8(sp)
    1180:	dc400117 	ldw	r17,4(sp)
    1184:	dc000017 	ldw	r16,0(sp)
    1188:	dec00404 	addi	sp,sp,16
	if (k == '\n') {
		k = alt_getchar();
	}
	k = k - 48;
	send(h);
	send(k);
    118c:	00010941 	jmpi	1094 <send>

00001190 <receiveNum>:
	return 0;

}

char receiveNum() {
	alt_putstr("Receive Num\n");
    1190:	01000034 	movhi	r4,0

	return 0;

}

char receiveNum() {
    1194:	defffd04 	addi	sp,sp,-12
	alt_putstr("Receive Num\n");
    1198:	21076804 	addi	r4,r4,7584

	return 0;

}

char receiveNum() {
    119c:	dfc00215 	stw	ra,8(sp)
    11a0:	dc400115 	stw	r17,4(sp)
    11a4:	dc000015 	stw	r16,0(sp)
	alt_putstr("Receive Num\n");
    11a8:	00019dc0 	call	19dc <alt_putstr>
	char data = 0;
	*transmit_enable = 1;
    11ac:	00c00044 	movi	r3,1
    11b0:	008c0c04 	movi	r2,12336
    11b4:	10c00005 	stb	r3,0(r2)
	while (1) {
		if (*character_received) {
    11b8:	00cc0404 	movi	r3,12304
    11bc:	18800003 	ldbu	r2,0(r3)
    11c0:	10803fcc 	andi	r2,r2,255
    11c4:	1080201c 	xori	r2,r2,128
    11c8:	10bfe004 	addi	r2,r2,-128
    11cc:	103ffb26 	beq	r2,zero,11bc <_gp+0xffff7314>
			usleep(100);
    11d0:	01001904 	movi	r4,100
    11d4:	0001a140 	call	1a14 <usleep>
			data = *data_bus_in;
    11d8:	008c1004 	movi	r2,12352
    11dc:	14000003 	ldbu	r16,0(r2)

			if (data > 9) {
    11e0:	00c00244 	movi	r3,9
    11e4:	80803fcc 	andi	r2,r16,255
    11e8:	1080201c 	xori	r2,r2,128
    11ec:	10bfe004 	addi	r2,r2,-128
    11f0:	1880010e 	bge	r3,r2,11f8 <receiveNum+0x68>
				data = data >> 1;
    11f4:	1020d07a 	srli	r16,r2,1
			}

			alt_putchar(data);
    11f8:	84403fcc 	andi	r17,r16,255
    11fc:	8c40201c 	xori	r17,r17,128
    1200:	8c7fe004 	addi	r17,r17,-128
    1204:	8809883a 	mov	r4,r17
    1208:	00019940 	call	1994 <alt_putchar>
			alt_printf("%c\n", data);
    120c:	01000034 	movhi	r4,0
    1210:	880b883a 	mov	r5,r17
    1214:	21076c04 	addi	r4,r4,7600
    1218:	00018240 	call	1824 <alt_printf>
			alt_putstr("\n");
    121c:	01000034 	movhi	r4,0
    1220:	21078804 	addi	r4,r4,7712
    1224:	00019dc0 	call	19dc <alt_putstr>
			*transmit_enable = 0;
    1228:	008c0c04 	movi	r2,12336
    122c:	10000005 	stb	zero,0(r2)

		}

	}

}
    1230:	8005883a 	mov	r2,r16
    1234:	dfc00217 	ldw	ra,8(sp)
    1238:	dc400117 	ldw	r17,4(sp)
    123c:	dc000017 	ldw	r16,0(sp)
    1240:	dec00304 	addi	sp,sp,12
    1244:	f800283a 	ret

00001248 <receiveChar>:

char receiveChar() {
	alt_putstr("Receive Char\n");
    1248:	01000034 	movhi	r4,0

	}

}

char receiveChar() {
    124c:	defffe04 	addi	sp,sp,-8
	alt_putstr("Receive Char\n");
    1250:	21078d04 	addi	r4,r4,7732

	}

}

char receiveChar() {
    1254:	dfc00115 	stw	ra,4(sp)
    1258:	dc000015 	stw	r16,0(sp)
	alt_putstr("Receive Char\n");
    125c:	00019dc0 	call	19dc <alt_putstr>
	char data = 0;
	*transmit_enable = 1;
    1260:	00c00044 	movi	r3,1
    1264:	008c0c04 	movi	r2,12336
    1268:	10c00005 	stb	r3,0(r2)
	while (1) {
		if (*character_received) {
    126c:	00cc0404 	movi	r3,12304
    1270:	18800003 	ldbu	r2,0(r3)
    1274:	10803fcc 	andi	r2,r2,255
    1278:	1080201c 	xori	r2,r2,128
    127c:	10bfe004 	addi	r2,r2,-128
    1280:	103ffb26 	beq	r2,zero,1270 <_gp+0xffff73c8>
			usleep(1000);
    1284:	0100fa04 	movi	r4,1000
    1288:	0001a140 	call	1a14 <usleep>
			data = *data_bus_in;
    128c:	008c1004 	movi	r2,12352
    1290:	14000003 	ldbu	r16,0(r2)

			if (data > 122) {
    1294:	00c01e84 	movi	r3,122
    1298:	80803fcc 	andi	r2,r16,255
    129c:	1080201c 	xori	r2,r2,128
    12a0:	10bfe004 	addi	r2,r2,-128
    12a4:	1880010e 	bge	r3,r2,12ac <receiveChar+0x64>
				data = data >> 1;
    12a8:	1020d07a 	srli	r16,r2,1
			}

			alt_putchar(data);
    12ac:	81003fcc 	andi	r4,r16,255
    12b0:	2100201c 	xori	r4,r4,128
    12b4:	213fe004 	addi	r4,r4,-128
    12b8:	00019940 	call	1994 <alt_putchar>
			alt_putstr("\n");
    12bc:	01000034 	movhi	r4,0
    12c0:	21078804 	addi	r4,r4,7712
    12c4:	00019dc0 	call	19dc <alt_putstr>
			*transmit_enable = 0;
    12c8:	008c0c04 	movi	r2,12336
    12cc:	10000005 	stb	zero,0(r2)

		}

	}

}
    12d0:	8005883a 	mov	r2,r16
    12d4:	dfc00117 	ldw	ra,4(sp)
    12d8:	dc000017 	ldw	r16,0(sp)
    12dc:	dec00204 	addi	sp,sp,8
    12e0:	f800283a 	ret

000012e4 <main>:
void getAttacked();
int send(unsigned int str);

int main() {

	alt_putstr("Welcome to Battleship!\n");
    12e4:	01000034 	movhi	r4,0
char receiveChar();
int checkShot(int i, int j);
void getAttacked();
int send(unsigned int str);

int main() {
    12e8:	deffe104 	addi	sp,sp,-124

	alt_putstr("Welcome to Battleship!\n");
    12ec:	21076d04 	addi	r4,r4,7604
char receiveChar();
int checkShot(int i, int j);
void getAttacked();
int send(unsigned int str);

int main() {
    12f0:	dfc01e15 	stw	ra,120(sp)
    12f4:	dc401a15 	stw	r17,104(sp)
    12f8:	dd001d15 	stw	r20,116(sp)
    12fc:	dcc01c15 	stw	r19,112(sp)
    1300:	dc801b15 	stw	r18,108(sp)
    1304:	dc001915 	stw	r16,100(sp)

	alt_putstr("Welcome to Battleship!\n");
    1308:	00019dc0 	call	19dc <alt_putstr>
	*transmit_enable = 0;
    130c:	008c0c04 	movi	r2,12336
    1310:	10000005 	stb	zero,0(r2)

	int playerNum = getPlayerNum();
    1314:	000105c0 	call	105c <getPlayerNum>
    1318:	1023883a 	mov	r17,r2
	int i, j;

	// puts in water in the 2d array
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			gameBoard[i][j] = 'w';
    131c:	01401dc4 	movi	r5,119
int main() {

	alt_putstr("Welcome to Battleship!\n");
	*transmit_enable = 0;

	int playerNum = getPlayerNum();
    1320:	0005883a 	mov	r2,zero

	int i, j;

	// puts in water in the 2d array
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
    1324:	01800284 	movi	r6,10
	int destroyerCounter = 0;

	int i, j;

	// puts in water in the 2d array
	for (i = 0; i < 10; i++) {
    1328:	01c01904 	movi	r7,100
char receiveChar();
int checkShot(int i, int j);
void getAttacked();
int send(unsigned int str);

int main() {
    132c:	0007883a 	mov	r3,zero
	int i, j;

	// puts in water in the 2d array
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			gameBoard[i][j] = 'w';
    1330:	1889883a 	add	r4,r3,r2
    1334:	d909883a 	add	r4,sp,r4
    1338:	21400005 	stb	r5,0(r4)

	int i, j;

	// puts in water in the 2d array
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
    133c:	18c00044 	addi	r3,r3,1
    1340:	19bffb1e 	bne	r3,r6,1330 <_gp+0xffff7488>
    1344:	10800284 	addi	r2,r2,10
	int destroyerCounter = 0;

	int i, j;

	// puts in water in the 2d array
	for (i = 0; i < 10; i++) {
    1348:	11fff81e 	bne	r2,r7,132c <_gp+0xffff7484>
		gameBoard[9][8 + j] = 'd';
	}

	int keepScore = 0;

	alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
    134c:	01000034 	movhi	r4,0

	//	 assigns all the different characters
	//	 to different positions in the 2d array

	for (i = 0; i < 4; i++) {
		gameBoard[i + 3][7] = 'b';
    1350:	00c01884 	movi	r3,98
		gameBoard[9][8 + j] = 'd';
	}

	int keepScore = 0;

	alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
    1354:	21077304 	addi	r4,r4,7628

	//	 assigns all the different characters
	//	 to different positions in the 2d array

	for (i = 0; i < 4; i++) {
		gameBoard[i + 3][7] = 'b';
    1358:	d8c00945 	stb	r3,37(sp)
    135c:	d8c00bc5 	stb	r3,47(sp)
    1360:	d8c00e45 	stb	r3,57(sp)
    1364:	d8c010c5 	stb	r3,67(sp)
	}
	for (j = 0; j < 2; j++) {
		gameBoard[9][8 + j] = 'd';
    1368:	d8801885 	stb	r2,98(sp)
    136c:	d88018c5 	stb	r2,99(sp)
	}

	int keepScore = 0;

	alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
	for (i = 0; i < 10; i++) {
    1370:	0025883a 	mov	r18,zero
		gameBoard[9][8 + j] = 'd';
	}

	int keepScore = 0;

	alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
    1374:	00018240 	call	1824 <alt_printf>
    1378:	04c00284 	movi	r19,10
	for (i = 0; i < 10; i++) {
		alt_printf("%x ", i); // prints the vertical row of number
    137c:	01000034 	movhi	r4,0
    1380:	900b883a 	mov	r5,r18
    1384:	21077904 	addi	r4,r4,7652
    1388:	00018240 	call	1824 <alt_printf>
    138c:	01400284 	movi	r5,10
    1390:	9009883a 	mov	r4,r18
    1394:	00016ac0 	call	16ac <__mulsi3>
    1398:	1029883a 	mov	r20,r2
		for (j = 0; j < 10; j++) {
    139c:	0021883a 	mov	r16,zero
			alt_printf("%c ", gameBoard[i][j]);
    13a0:	8507883a 	add	r3,r16,r20
    13a4:	d8c7883a 	add	r3,sp,r3
    13a8:	19400007 	ldb	r5,0(r3)
    13ac:	01000034 	movhi	r4,0
    13b0:	21077a04 	addi	r4,r4,7656
	int keepScore = 0;

	alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
	for (i = 0; i < 10; i++) {
		alt_printf("%x ", i); // prints the vertical row of number
		for (j = 0; j < 10; j++) {
    13b4:	84000044 	addi	r16,r16,1
			alt_printf("%c ", gameBoard[i][j]);
    13b8:	00018240 	call	1824 <alt_printf>
	int keepScore = 0;

	alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
	for (i = 0; i < 10; i++) {
		alt_printf("%x ", i); // prints the vertical row of number
		for (j = 0; j < 10; j++) {
    13bc:	84fff81e 	bne	r16,r19,13a0 <_gp+0xffff74f8>
			alt_printf("%c ", gameBoard[i][j]);
		}
		alt_putstr("\n");
    13c0:	01000034 	movhi	r4,0
    13c4:	21078804 	addi	r4,r4,7712
	}

	int keepScore = 0;

	alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
	for (i = 0; i < 10; i++) {
    13c8:	94800044 	addi	r18,r18,1
		alt_printf("%x ", i); // prints the vertical row of number
		for (j = 0; j < 10; j++) {
			alt_printf("%c ", gameBoard[i][j]);
		}
		alt_putstr("\n");
    13cc:	00019dc0 	call	19dc <alt_putstr>
	}

	int keepScore = 0;

	alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
	for (i = 0; i < 10; i++) {
    13d0:	943fea1e 	bne	r18,r16,137c <_gp+0xffff74d4>
	unsigned int h;
	unsigned int k;
	int shot;

	do {
		switch (playerNum) {
    13d4:	00800c44 	movi	r2,49
    13d8:	00c00c84 	movi	r3,50
    13dc:	88800226 	beq	r17,r2,13e8 <main+0x104>
    13e0:	88c02026 	beq	r17,r3,1464 <main+0x180>
    13e4:	003ffd06 	br	13dc <_gp+0xffff7534>
		case '1':

			// ATTACK

			// Send a missile
			getCoordinates();
    13e8:	000110c0 	call	110c <getCoordinates>
				alt_putstr("You just drowned the destroyer\n");
				destroyerCounter = 0;
			}

			// Get attacked
			h = receiveNum();
    13ec:	00011900 	call	1190 <receiveNum>
    13f0:	14803fcc 	andi	r18,r2,255
			k = receiveNum();
    13f4:	00011900 	call	1190 <receiveNum>
    13f8:	14003fcc 	andi	r16,r2,255
				alt_putstr("You just drowned the destroyer\n");
				destroyerCounter = 0;
			}

			// Get attacked
			h = receiveNum();
    13fc:	9480201c 	xori	r18,r18,128
			k = receiveNum();
    1400:	8400201c 	xori	r16,r16,128
				alt_putstr("You just drowned the destroyer\n");
				destroyerCounter = 0;
			}

			// Get attacked
			h = receiveNum();
    1404:	94bfe004 	addi	r18,r18,-128
			k = receiveNum();
    1408:	843fe004 	addi	r16,r16,-128

			alt_printf("h: %x, k: %x ", h, k);
    140c:	01000034 	movhi	r4,0
    1410:	800d883a 	mov	r6,r16
    1414:	900b883a 	mov	r5,r18
    1418:	21077b04 	addi	r4,r4,7660
    141c:	00018240 	call	1824 <alt_printf>
			//	 the player hit, miss, or has he already used that input

			// CHECK SHOT
			shot = 0;

			switch (gameBoard[h][k]) {
    1420:	01400284 	movi	r5,10
    1424:	9009883a 	mov	r4,r18
    1428:	00016ac0 	call	16ac <__mulsi3>
    142c:	d885883a 	add	r2,sp,r2
    1430:	1405883a 	add	r2,r2,r16
    1434:	10800007 	ldb	r2,0(r2)
    1438:	00c01cc4 	movi	r3,115
    143c:	18800616 	blt	r3,r2,1458 <main+0x174>
    1440:	00c01c84 	movi	r3,114
    1444:	10c02e0e 	bge	r2,r3,1500 <main+0x21c>
    1448:	10bfe784 	addi	r2,r2,-98
    144c:	00c00084 	movi	r3,2
    1450:	18803536 	bltu	r3,r2,1528 <main+0x244>
    1454:	00002a06 	br	1500 <main+0x21c>
    1458:	00c01dc4 	movi	r3,119
    145c:	10c05d26 	beq	r2,r3,15d4 <main+0x2f0>
    1460:	00003106 	br	1528 <main+0x244>

			break;
		case '2':

			// Get attacked
			h = receiveNum();
    1464:	00011900 	call	1190 <receiveNum>
    1468:	14803fcc 	andi	r18,r2,255
			k = receiveNum();
    146c:	00011900 	call	1190 <receiveNum>
    1470:	14003fcc 	andi	r16,r2,255

			break;
		case '2':

			// Get attacked
			h = receiveNum();
    1474:	9480201c 	xori	r18,r18,128
			k = receiveNum();
    1478:	8400201c 	xori	r16,r16,128

			break;
		case '2':

			// Get attacked
			h = receiveNum();
    147c:	94bfe004 	addi	r18,r18,-128
			k = receiveNum();
    1480:	843fe004 	addi	r16,r16,-128
			alt_printf("h: %x, k: %x ", h, k);
    1484:	01000034 	movhi	r4,0
    1488:	800d883a 	mov	r6,r16
    148c:	900b883a 	mov	r5,r18
    1490:	21077b04 	addi	r4,r4,7660
    1494:	00018240 	call	1824 <alt_printf>
			//	 the player hit, miss, or has he already used that input

			// CHECK SHOT
			shot = 0;

			switch (gameBoard[h][k]) {
    1498:	01400284 	movi	r5,10
    149c:	9009883a 	mov	r4,r18
    14a0:	00016ac0 	call	16ac <__mulsi3>
    14a4:	d885883a 	add	r2,sp,r2
    14a8:	1405883a 	add	r2,r2,r16
    14ac:	10800007 	ldb	r2,0(r2)
    14b0:	00c01cc4 	movi	r3,115
    14b4:	18800616 	blt	r3,r2,14d0 <main+0x1ec>
    14b8:	00c01c84 	movi	r3,114
    14bc:	10c0500e 	bge	r2,r3,1600 <main+0x31c>
    14c0:	10bfe784 	addi	r2,r2,-98
    14c4:	00c00084 	movi	r3,2
    14c8:	18807436 	bltu	r3,r2,169c <main+0x3b8>
    14cc:	00004c06 	br	1600 <main+0x31c>
    14d0:	00c01dc4 	movi	r3,119
    14d4:	10c0711e 	bne	r2,r3,169c <main+0x3b8>
			//	 or a miss or if the user has already used those
			//	 coordinates

			switch (shot) {
			case 0:
				alt_putstr("Miss!\n");
    14d8:	01000034 	movhi	r4,0
    14dc:	21078904 	addi	r4,r4,7716
    14e0:	00019dc0 	call	19dc <alt_putstr>
				gameBoard[h][k] = 'm';
    14e4:	01400284 	movi	r5,10
    14e8:	9009883a 	mov	r4,r18
    14ec:	00016ac0 	call	16ac <__mulsi3>
    14f0:	d885883a 	add	r2,sp,r2
    14f4:	1421883a 	add	r16,r2,r16
    14f8:	00801b44 	movi	r2,109
    14fc:	00004906 	br	1624 <main+0x340>
				alt_putstr("Miss!\n");
				gameBoard[h][k] = 'm';
				//send(MISS_CHAR);
				break;
			case 1:
				alt_putstr("It was a hit! \n");
    1500:	01000034 	movhi	r4,0
    1504:	21077f04 	addi	r4,r4,7676
    1508:	00019dc0 	call	19dc <alt_putstr>
				//send(gameBoard[h][k]);
				gameBoard[h][k] = 'x';
    150c:	01400284 	movi	r5,10
    1510:	9009883a 	mov	r4,r18
    1514:	00016ac0 	call	16ac <__mulsi3>
    1518:	d885883a 	add	r2,sp,r2
    151c:	1421883a 	add	r16,r2,r16
    1520:	00801e04 	movi	r2,120
    1524:	00003406 	br	15f8 <main+0x314>
				break;
			case 2:
				alt_putstr("You already hit here\n");
    1528:	01000034 	movhi	r4,0
    152c:	21078304 	addi	r4,r4,7692
    1530:	00019dc0 	call	19dc <alt_putstr>
	int keepScore = 0;

	alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
	for (i = 0; i < 10; i++) {
		alt_printf("%x ", i); // prints the vertical row of number
		for (j = 0; j < 10; j++) {
    1534:	0007883a 	mov	r3,zero
				alt_putstr("You already hit here\n");
				break;
			}
			for (i = 0; i < 10; i++) {
				for (j = 0; j < 10; j++) {
					gameBoard[i][j] = 'w';
    1538:	01401dc4 	movi	r5,119
			case 2:
				alt_putstr("You already hit here\n");
				break;
			}
			for (i = 0; i < 10; i++) {
				for (j = 0; j < 10; j++) {
    153c:	01800284 	movi	r6,10
				break;
			case 2:
				alt_putstr("You already hit here\n");
				break;
			}
			for (i = 0; i < 10; i++) {
    1540:	01c01904 	movi	r7,100
	int keepScore = 0;

	alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
	for (i = 0; i < 10; i++) {
		alt_printf("%x ", i); // prints the vertical row of number
		for (j = 0; j < 10; j++) {
    1544:	0005883a 	mov	r2,zero
				alt_putstr("You already hit here\n");
				break;
			}
			for (i = 0; i < 10; i++) {
				for (j = 0; j < 10; j++) {
					gameBoard[i][j] = 'w';
    1548:	10c9883a 	add	r4,r2,r3
    154c:	d909883a 	add	r4,sp,r4
    1550:	21400005 	stb	r5,0(r4)
			case 2:
				alt_putstr("You already hit here\n");
				break;
			}
			for (i = 0; i < 10; i++) {
				for (j = 0; j < 10; j++) {
    1554:	10800044 	addi	r2,r2,1
    1558:	11bffb1e 	bne	r2,r6,1548 <_gp+0xffff76a0>
    155c:	18c00284 	addi	r3,r3,10
				break;
			case 2:
				alt_putstr("You already hit here\n");
				break;
			}
			for (i = 0; i < 10; i++) {
    1560:	19fff81e 	bne	r3,r7,1544 <_gp+0xffff769c>
				for (j = 0; j < 10; j++) {
					gameBoard[i][j] = 'w';
				}
			}

			alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
    1564:	01000034 	movhi	r4,0
    1568:	21077304 	addi	r4,r4,7628
    156c:	00018240 	call	1824 <alt_printf>
			for (i = 0; i < 10; i++) {
    1570:	0021883a 	mov	r16,zero
    1574:	04c00284 	movi	r19,10
				alt_printf("%x ", i); // prints the vertical row of number
    1578:	01000034 	movhi	r4,0
    157c:	800b883a 	mov	r5,r16
    1580:	21077904 	addi	r4,r4,7652
    1584:	00018240 	call	1824 <alt_printf>
    1588:	01400284 	movi	r5,10
    158c:	8009883a 	mov	r4,r16
    1590:	00016ac0 	call	16ac <__mulsi3>
    1594:	1029883a 	mov	r20,r2
				for (j = 0; j < 10; j++) {
    1598:	0025883a 	mov	r18,zero
					alt_printf("%c ", gameBoard[i][j]);
    159c:	9507883a 	add	r3,r18,r20
    15a0:	d8c7883a 	add	r3,sp,r3
    15a4:	19400007 	ldb	r5,0(r3)
    15a8:	01000034 	movhi	r4,0
    15ac:	21077a04 	addi	r4,r4,7656
			}

			alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
			for (i = 0; i < 10; i++) {
				alt_printf("%x ", i); // prints the vertical row of number
				for (j = 0; j < 10; j++) {
    15b0:	94800044 	addi	r18,r18,1
					alt_printf("%c ", gameBoard[i][j]);
    15b4:	00018240 	call	1824 <alt_printf>
			}

			alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
			for (i = 0; i < 10; i++) {
				alt_printf("%x ", i); // prints the vertical row of number
				for (j = 0; j < 10; j++) {
    15b8:	94fff81e 	bne	r18,r19,159c <_gp+0xffff76f4>
					alt_printf("%c ", gameBoard[i][j]);
				}
				alt_putstr("\n");
    15bc:	01000034 	movhi	r4,0
    15c0:	21078804 	addi	r4,r4,7712
					gameBoard[i][j] = 'w';
				}
			}

			alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
			for (i = 0; i < 10; i++) {
    15c4:	84000044 	addi	r16,r16,1
				alt_printf("%x ", i); // prints the vertical row of number
				for (j = 0; j < 10; j++) {
					alt_printf("%c ", gameBoard[i][j]);
				}
				alt_putstr("\n");
    15c8:	00019dc0 	call	19dc <alt_putstr>
					gameBoard[i][j] = 'w';
				}
			}

			alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
			for (i = 0; i < 10; i++) {
    15cc:	84ffea1e 	bne	r16,r19,1578 <_gp+0xffff76d0>
    15d0:	003f8006 	br	13d4 <_gp+0xffff752c>
			//	 or a miss or if the user has already used those
			//	 coordinates

			switch (shot) {
			case 0:
				alt_putstr("Miss!\n");
    15d4:	01000034 	movhi	r4,0
    15d8:	21078904 	addi	r4,r4,7716
    15dc:	00019dc0 	call	19dc <alt_putstr>
				gameBoard[h][k] = 'm';
    15e0:	01400284 	movi	r5,10
    15e4:	9009883a 	mov	r4,r18
    15e8:	00016ac0 	call	16ac <__mulsi3>
    15ec:	d885883a 	add	r2,sp,r2
    15f0:	1421883a 	add	r16,r2,r16
    15f4:	00801b44 	movi	r2,109
    15f8:	80800005 	stb	r2,0(r16)
				//send(MISS_CHAR);
				break;
    15fc:	003fcd06 	br	1534 <_gp+0xffff768c>
				alt_putstr("Miss!\n");
				gameBoard[h][k] = 'm';
				//send(MISS_CHAR);
				break;
			case 1:
				alt_putstr("It was a hit! \n");
    1600:	01000034 	movhi	r4,0
    1604:	21077f04 	addi	r4,r4,7676
    1608:	00019dc0 	call	19dc <alt_putstr>
				//send(gameBoard[h][k]);
				gameBoard[h][k] = 'x';
    160c:	01400284 	movi	r5,10
    1610:	9009883a 	mov	r4,r18
    1614:	00016ac0 	call	16ac <__mulsi3>
    1618:	d885883a 	add	r2,sp,r2
    161c:	1421883a 	add	r16,r2,r16
    1620:	00801e04 	movi	r2,120
    1624:	80800005 	stb	r2,0(r16)
			case 2:
				alt_putstr("Error\n");
				break;
			}

			alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
    1628:	01000034 	movhi	r4,0
    162c:	21077304 	addi	r4,r4,7628
    1630:	00018240 	call	1824 <alt_printf>
			for (i = 0; i < 10; i++) {
    1634:	0025883a 	mov	r18,zero
    1638:	04c00284 	movi	r19,10
				alt_printf("%x ", i); // prints the vertical row of number
    163c:	01000034 	movhi	r4,0
    1640:	900b883a 	mov	r5,r18
    1644:	21077904 	addi	r4,r4,7652
    1648:	00018240 	call	1824 <alt_printf>
    164c:	01400284 	movi	r5,10
    1650:	9009883a 	mov	r4,r18
    1654:	00016ac0 	call	16ac <__mulsi3>
    1658:	1029883a 	mov	r20,r2
				for (j = 0; j < 10; j++) {
    165c:	0021883a 	mov	r16,zero
					alt_printf("%c ", gameBoard[i][j]);
    1660:	8507883a 	add	r3,r16,r20
    1664:	d8c7883a 	add	r3,sp,r3
    1668:	19400007 	ldb	r5,0(r3)
    166c:	01000034 	movhi	r4,0
    1670:	21077a04 	addi	r4,r4,7656
			}

			alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
			for (i = 0; i < 10; i++) {
				alt_printf("%x ", i); // prints the vertical row of number
				for (j = 0; j < 10; j++) {
    1674:	84000044 	addi	r16,r16,1
					alt_printf("%c ", gameBoard[i][j]);
    1678:	00018240 	call	1824 <alt_printf>
			}

			alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
			for (i = 0; i < 10; i++) {
				alt_printf("%x ", i); // prints the vertical row of number
				for (j = 0; j < 10; j++) {
    167c:	84fff81e 	bne	r16,r19,1660 <_gp+0xffff77b8>
					alt_printf("%c ", gameBoard[i][j]);
				}
				alt_putstr("\n");
    1680:	01000034 	movhi	r4,0
    1684:	21078804 	addi	r4,r4,7712
				alt_putstr("Error\n");
				break;
			}

			alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
			for (i = 0; i < 10; i++) {
    1688:	94800044 	addi	r18,r18,1
				alt_printf("%x ", i); // prints the vertical row of number
				for (j = 0; j < 10; j++) {
					alt_printf("%c ", gameBoard[i][j]);
				}
				alt_putstr("\n");
    168c:	00019dc0 	call	19dc <alt_putstr>
				alt_putstr("Error\n");
				break;
			}

			alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
			for (i = 0; i < 10; i++) {
    1690:	943fea1e 	bne	r18,r16,163c <_gp+0xffff7794>
			}

			// ATTACK

			// Send a missile
			getCoordinates();
    1694:	000110c0 	call	110c <getCoordinates>
    1698:	003f4e06 	br	13d4 <_gp+0xffff752c>
				alt_putstr("It was a hit! \n");
				//send(gameBoard[h][k]);
				gameBoard[h][k] = 'x';
				break;
			case 2:
				alt_putstr("Error\n");
    169c:	01000034 	movhi	r4,0
    16a0:	21078b04 	addi	r4,r4,7724
    16a4:	00019dc0 	call	19dc <alt_putstr>
				break;
    16a8:	003fdf06 	br	1628 <_gp+0xffff7780>

000016ac <__mulsi3>:
    16ac:	0005883a 	mov	r2,zero
    16b0:	20000726 	beq	r4,zero,16d0 <__mulsi3+0x24>
    16b4:	20c0004c 	andi	r3,r4,1
    16b8:	2008d07a 	srli	r4,r4,1
    16bc:	18000126 	beq	r3,zero,16c4 <__mulsi3+0x18>
    16c0:	1145883a 	add	r2,r2,r5
    16c4:	294b883a 	add	r5,r5,r5
    16c8:	203ffa1e 	bne	r4,zero,16b4 <_gp+0xffff780c>
    16cc:	f800283a 	ret
    16d0:	f800283a 	ret

000016d4 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    16d4:	00800034 	movhi	r2,0
    16d8:	10879404 	addi	r2,r2,7760
    16dc:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    16e0:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    16e4:	01000034 	movhi	r4,0
    16e8:	01800044 	movi	r6,1
    16ec:	d80b883a 	mov	r5,sp
    16f0:	2107aa04 	addi	r4,r4,7848
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    16f4:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    16f8:	0001a3c0 	call	1a3c <altera_avalon_jtag_uart_read>
    16fc:	0080020e 	bge	zero,r2,1708 <alt_getchar+0x34>
        return -1;
    }
    return c;
    1700:	d8800007 	ldb	r2,0(sp)
    1704:	00000106 	br	170c <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    1708:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
    170c:	dfc00117 	ldw	ra,4(sp)
    1710:	dec00204 	addi	sp,sp,8
    1714:	f800283a 	ret

00001718 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1718:	deffff04 	addi	sp,sp,-4
    171c:	01000034 	movhi	r4,0
    1720:	01400034 	movhi	r5,0
    1724:	dfc00015 	stw	ra,0(sp)
    1728:	21079404 	addi	r4,r4,7760
    172c:	2947b004 	addi	r5,r5,7872

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1730:	2140061e 	bne	r4,r5,174c <alt_load+0x34>
    1734:	01000034 	movhi	r4,0
    1738:	01400034 	movhi	r5,0
    173c:	21040804 	addi	r4,r4,4128
    1740:	29440804 	addi	r5,r5,4128
    1744:	2140121e 	bne	r4,r5,1790 <alt_load+0x78>
    1748:	00000b06 	br	1778 <alt_load+0x60>
    174c:	00c00034 	movhi	r3,0
    1750:	18c7b004 	addi	r3,r3,7872
    1754:	1907c83a 	sub	r3,r3,r4
    1758:	0005883a 	mov	r2,zero
  {
    while( to != end )
    175c:	10fff526 	beq	r2,r3,1734 <_gp+0xffff788c>
    {
      *to++ = *from++;
    1760:	114f883a 	add	r7,r2,r5
    1764:	39c00017 	ldw	r7,0(r7)
    1768:	110d883a 	add	r6,r2,r4
    176c:	10800104 	addi	r2,r2,4
    1770:	31c00015 	stw	r7,0(r6)
    1774:	003ff906 	br	175c <_gp+0xffff78b4>
    1778:	01000034 	movhi	r4,0
    177c:	01400034 	movhi	r5,0
    1780:	21074f04 	addi	r4,r4,7484
    1784:	29474f04 	addi	r5,r5,7484

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1788:	2140101e 	bne	r4,r5,17cc <alt_load+0xb4>
    178c:	00000b06 	br	17bc <alt_load+0xa4>
    1790:	00c00034 	movhi	r3,0
    1794:	18c40804 	addi	r3,r3,4128
    1798:	1907c83a 	sub	r3,r3,r4
    179c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    17a0:	10fff526 	beq	r2,r3,1778 <_gp+0xffff78d0>
    {
      *to++ = *from++;
    17a4:	114f883a 	add	r7,r2,r5
    17a8:	39c00017 	ldw	r7,0(r7)
    17ac:	110d883a 	add	r6,r2,r4
    17b0:	10800104 	addi	r2,r2,4
    17b4:	31c00015 	stw	r7,0(r6)
    17b8:	003ff906 	br	17a0 <_gp+0xffff78f8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    17bc:	0001b540 	call	1b54 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    17c0:	dfc00017 	ldw	ra,0(sp)
    17c4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    17c8:	0001b601 	jmpi	1b60 <alt_icache_flush_all>
    17cc:	00c00034 	movhi	r3,0
    17d0:	18c79404 	addi	r3,r3,7760
    17d4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    17d8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    17dc:	18bff726 	beq	r3,r2,17bc <_gp+0xffff7914>
    {
      *to++ = *from++;
    17e0:	114f883a 	add	r7,r2,r5
    17e4:	39c00017 	ldw	r7,0(r7)
    17e8:	110d883a 	add	r6,r2,r4
    17ec:	10800104 	addi	r2,r2,4
    17f0:	31c00015 	stw	r7,0(r6)
    17f4:	003ff906 	br	17dc <_gp+0xffff7934>

000017f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    17f8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    17fc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1800:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1804:	0001a180 	call	1a18 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1808:	0001a380 	call	1a38 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    180c:	d1a02217 	ldw	r6,-32632(gp)
    1810:	d1602317 	ldw	r5,-32628(gp)
    1814:	d1202417 	ldw	r4,-32624(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1818:	dfc00017 	ldw	ra,0(sp)
    181c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1820:	00012e41 	jmpi	12e4 <main>

00001824 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    1824:	defff204 	addi	sp,sp,-56
    1828:	2005883a 	mov	r2,r4
    182c:	dfc00a15 	stw	ra,40(sp)
    1830:	df000915 	stw	fp,36(sp)
    1834:	ddc00815 	stw	r23,32(sp)
    1838:	dd800715 	stw	r22,28(sp)
    183c:	dd400615 	stw	r21,24(sp)
    1840:	dd000515 	stw	r20,20(sp)
    1844:	dcc00415 	stw	r19,16(sp)
    1848:	dc800315 	stw	r18,12(sp)
    184c:	dc400215 	stw	r17,8(sp)
    1850:	dc000115 	stw	r16,4(sp)
    1854:	d9400b15 	stw	r5,44(sp)
    1858:	d9800c15 	stw	r6,48(sp)
    185c:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    1860:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
    1864:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    1868:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
    186c:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    1870:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    1874:	11000007 	ldb	r4,0(r2)
    1878:	20003a26 	beq	r4,zero,1964 <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    187c:	24000226 	beq	r4,r16,1888 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    1880:	14400044 	addi	r17,r2,1
    1884:	00001406 	br	18d8 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    1888:	14400084 	addi	r17,r2,2
    188c:	10800047 	ldb	r2,1(r2)
    1890:	10003426 	beq	r2,zero,1964 <alt_printf+0x140>
            {
                if (c == '%')
    1894:	1400021e 	bne	r2,r16,18a0 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    1898:	8009883a 	mov	r4,r16
    189c:	00000e06 	br	18d8 <alt_printf+0xb4>
                } 
                else if (c == 'c')
    18a0:	1480051e 	bne	r2,r18,18b8 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
    18a4:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    18a8:	ad800104 	addi	r22,r21,4
    18ac:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
    18b0:	00019940 	call	1994 <alt_putchar>
    18b4:	00002906 	br	195c <alt_printf+0x138>
                }
                else if (c == 'x')
    18b8:	14c0201e 	bne	r2,r19,193c <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    18bc:	adc00017 	ldw	r23,0(r21)
    18c0:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    18c4:	b8000326 	beq	r23,zero,18d4 <alt_printf+0xb0>
    18c8:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    18cc:	00c003c4 	movi	r3,15
    18d0:	00000306 	br	18e0 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
    18d4:	01000c04 	movi	r4,48
    18d8:	00019940 	call	1994 <alt_putchar>
                        continue;
    18dc:	00001f06 	br	195c <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    18e0:	1d84983a 	sll	r2,r3,r22
    18e4:	15c4703a 	and	r2,r2,r23
    18e8:	1000021e 	bne	r2,zero,18f4 <alt_printf+0xd0>
                        digit_shift -= 4;
    18ec:	b5bfff04 	addi	r22,r22,-4
    18f0:	003ffb06 	br	18e0 <_gp+0xffff7a38>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    18f4:	070003c4 	movi	fp,15
                        if (digit <= 9)
    18f8:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    18fc:	b0001716 	blt	r22,zero,195c <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    1900:	e588983a 	sll	r4,fp,r22
    1904:	25c8703a 	and	r4,r4,r23
    1908:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
    190c:	19000236 	bltu	r3,r4,1918 <alt_printf+0xf4>
                            c = '0' + digit;
    1910:	21000c04 	addi	r4,r4,48
    1914:	00000106 	br	191c <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
    1918:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
    191c:	21003fcc 	andi	r4,r4,255
    1920:	2100201c 	xori	r4,r4,128
    1924:	213fe004 	addi	r4,r4,-128
    1928:	d8c00015 	stw	r3,0(sp)
    192c:	00019940 	call	1994 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    1930:	b5bfff04 	addi	r22,r22,-4
    1934:	d8c00017 	ldw	r3,0(sp)
    1938:	003ff006 	br	18fc <_gp+0xffff7a54>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    193c:	1500071e 	bne	r2,r20,195c <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    1940:	ad800017 	ldw	r22,0(r21)
    1944:	ad400104 	addi	r21,r21,4

                    while(*s)
    1948:	b1000007 	ldb	r4,0(r22)
    194c:	20000326 	beq	r4,zero,195c <alt_printf+0x138>
                      alt_putchar(*s++);
    1950:	b5800044 	addi	r22,r22,1
    1954:	00019940 	call	1994 <alt_putchar>
    1958:	003ffb06 	br	1948 <_gp+0xffff7aa0>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    195c:	8805883a 	mov	r2,r17
    1960:	003fc406 	br	1874 <_gp+0xffff79cc>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    1964:	dfc00a17 	ldw	ra,40(sp)
    1968:	df000917 	ldw	fp,36(sp)
    196c:	ddc00817 	ldw	r23,32(sp)
    1970:	dd800717 	ldw	r22,28(sp)
    1974:	dd400617 	ldw	r21,24(sp)
    1978:	dd000517 	ldw	r20,20(sp)
    197c:	dcc00417 	ldw	r19,16(sp)
    1980:	dc800317 	ldw	r18,12(sp)
    1984:	dc400217 	ldw	r17,8(sp)
    1988:	dc000117 	ldw	r16,4(sp)
    198c:	dec00e04 	addi	sp,sp,56
    1990:	f800283a 	ret

00001994 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    1994:	defffd04 	addi	sp,sp,-12
    1998:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    199c:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    19a0:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    19a4:	01000034 	movhi	r4,0
    19a8:	000f883a 	mov	r7,zero
    19ac:	01800044 	movi	r6,1
    19b0:	d80b883a 	mov	r5,sp
    19b4:	2107aa04 	addi	r4,r4,7848
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    19b8:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    19bc:	0001a980 	call	1a98 <altera_avalon_jtag_uart_write>
    19c0:	00ffffc4 	movi	r3,-1
    19c4:	10c00126 	beq	r2,r3,19cc <alt_putchar+0x38>
        return -1;
    }
    return c;
    19c8:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    19cc:	dfc00217 	ldw	ra,8(sp)
    19d0:	dc000117 	ldw	r16,4(sp)
    19d4:	dec00304 	addi	sp,sp,12
    19d8:	f800283a 	ret

000019dc <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    19dc:	defffe04 	addi	sp,sp,-8
    19e0:	dc000015 	stw	r16,0(sp)
    19e4:	dfc00115 	stw	ra,4(sp)
    19e8:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    19ec:	0001b6c0 	call	1b6c <strlen>
    19f0:	01000034 	movhi	r4,0
    19f4:	000f883a 	mov	r7,zero
    19f8:	100d883a 	mov	r6,r2
    19fc:	800b883a 	mov	r5,r16
    1a00:	2107aa04 	addi	r4,r4,7848
#else
    return fputs(str, stdout);
#endif
#endif
}
    1a04:	dfc00117 	ldw	ra,4(sp)
    1a08:	dc000017 	ldw	r16,0(sp)
    1a0c:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    1a10:	0001a981 	jmpi	1a98 <altera_avalon_jtag_uart_write>

00001a14 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    1a14:	0001acc1 	jmpi	1acc <alt_busy_sleep>

00001a18 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1a18:	deffff04 	addi	sp,sp,-4
    1a1c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
    1a20:	0001b640 	call	1b64 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1a24:	00800044 	movi	r2,1
    1a28:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1a2c:	dfc00017 	ldw	ra,0(sp)
    1a30:	dec00104 	addi	sp,sp,4
    1a34:	f800283a 	ret

00001a38 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1a38:	f800283a 	ret

00001a3c <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    1a3c:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
    1a40:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    1a44:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    1a48:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    1a4c:	11800b2e 	bgeu	r2,r6,1a7c <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    1a50:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    1a54:	1a60000c 	andi	r9,r3,32768
    1a58:	48000326 	beq	r9,zero,1a68 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    1a5c:	10c00005 	stb	r3,0(r2)
    1a60:	10800044 	addi	r2,r2,1
    1a64:	003ff906 	br	1a4c <_gp+0xffff7ba4>
    else if (ptr != buffer)
    1a68:	11400226 	beq	r2,r5,1a74 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
    1a6c:	1145c83a 	sub	r2,r2,r5
    1a70:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    1a74:	403ff526 	beq	r8,zero,1a4c <_gp+0xffff7ba4>
    1a78:	00000106 	br	1a80 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
    1a7c:	117ffb1e 	bne	r2,r5,1a6c <_gp+0xffff7bc4>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    1a80:	39d0000c 	andi	r7,r7,16384
    1a84:	3800021e 	bne	r7,zero,1a90 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
    1a88:	00bffec4 	movi	r2,-5
    1a8c:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    1a90:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    1a94:	f800283a 	ret

00001a98 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1a98:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1a9c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    1aa0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1aa4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1aa8:	2980072e 	bgeu	r5,r6,1ac8 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1aac:	38c00037 	ldwio	r3,0(r7)
    1ab0:	18ffffec 	andhi	r3,r3,65535
    1ab4:	183ffc26 	beq	r3,zero,1aa8 <_gp+0xffff7c00>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1ab8:	28c00007 	ldb	r3,0(r5)
    1abc:	20c00035 	stwio	r3,0(r4)
    1ac0:	29400044 	addi	r5,r5,1
    1ac4:	003ff806 	br	1aa8 <_gp+0xffff7c00>

  return count;
}
    1ac8:	f800283a 	ret

00001acc <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1acc:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    1ad0:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1ad4:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    1ad8:	dc000015 	stw	r16,0(sp)
    1adc:	dfc00115 	stw	ra,4(sp)
    1ae0:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1ae4:	0001c800 	call	1c80 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1ae8:	10001026 	beq	r2,zero,1b2c <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1aec:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1af0:	013999b4 	movhi	r4,58982
    1af4:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1af8:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1afc:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1b00:	297fffc4 	addi	r5,r5,-1
    1b04:	283ffe1e 	bne	r5,zero,1b00 <_gp+0xffff7c58>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1b08:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1b0c:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1b10:	18bffb16 	blt	r3,r2,1b00 <_gp+0xffff7c58>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1b14:	01400144 	movi	r5,5
    1b18:	8009883a 	mov	r4,r16
    1b1c:	00016ac0 	call	16ac <__mulsi3>
    1b20:	10bfffc4 	addi	r2,r2,-1
    1b24:	103ffe1e 	bne	r2,zero,1b20 <_gp+0xffff7c78>
    1b28:	00000506 	br	1b40 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1b2c:	01400144 	movi	r5,5
    1b30:	8009883a 	mov	r4,r16
    1b34:	00016ac0 	call	16ac <__mulsi3>
    1b38:	10bfffc4 	addi	r2,r2,-1
    1b3c:	00bffe16 	blt	zero,r2,1b38 <_gp+0xffff7c90>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    1b40:	0005883a 	mov	r2,zero
    1b44:	dfc00117 	ldw	ra,4(sp)
    1b48:	dc000017 	ldw	r16,0(sp)
    1b4c:	dec00204 	addi	sp,sp,8
    1b50:	f800283a 	ret

00001b54 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1b54:	f800283a 	ret

00001b58 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    1b58:	3005883a 	mov	r2,r6
    1b5c:	f800283a 	ret

00001b60 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1b60:	f800283a 	ret

00001b64 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1b64:	000170fa 	wrctl	ienable,zero
    1b68:	f800283a 	ret

00001b6c <strlen>:
    1b6c:	2005883a 	mov	r2,r4
    1b70:	10c00007 	ldb	r3,0(r2)
    1b74:	18000226 	beq	r3,zero,1b80 <strlen+0x14>
    1b78:	10800044 	addi	r2,r2,1
    1b7c:	003ffc06 	br	1b70 <_gp+0xffff7cc8>
    1b80:	1105c83a 	sub	r2,r2,r4
    1b84:	f800283a 	ret

00001b88 <__divsi3>:
    1b88:	20001b16 	blt	r4,zero,1bf8 <__divsi3+0x70>
    1b8c:	000f883a 	mov	r7,zero
    1b90:	28001616 	blt	r5,zero,1bec <__divsi3+0x64>
    1b94:	200d883a 	mov	r6,r4
    1b98:	29001a2e 	bgeu	r5,r4,1c04 <__divsi3+0x7c>
    1b9c:	00800804 	movi	r2,32
    1ba0:	00c00044 	movi	r3,1
    1ba4:	00000106 	br	1bac <__divsi3+0x24>
    1ba8:	10000d26 	beq	r2,zero,1be0 <__divsi3+0x58>
    1bac:	294b883a 	add	r5,r5,r5
    1bb0:	10bfffc4 	addi	r2,r2,-1
    1bb4:	18c7883a 	add	r3,r3,r3
    1bb8:	293ffb36 	bltu	r5,r4,1ba8 <_gp+0xffff7d00>
    1bbc:	0005883a 	mov	r2,zero
    1bc0:	18000726 	beq	r3,zero,1be0 <__divsi3+0x58>
    1bc4:	0005883a 	mov	r2,zero
    1bc8:	31400236 	bltu	r6,r5,1bd4 <__divsi3+0x4c>
    1bcc:	314dc83a 	sub	r6,r6,r5
    1bd0:	10c4b03a 	or	r2,r2,r3
    1bd4:	1806d07a 	srli	r3,r3,1
    1bd8:	280ad07a 	srli	r5,r5,1
    1bdc:	183ffa1e 	bne	r3,zero,1bc8 <_gp+0xffff7d20>
    1be0:	38000126 	beq	r7,zero,1be8 <__divsi3+0x60>
    1be4:	0085c83a 	sub	r2,zero,r2
    1be8:	f800283a 	ret
    1bec:	014bc83a 	sub	r5,zero,r5
    1bf0:	39c0005c 	xori	r7,r7,1
    1bf4:	003fe706 	br	1b94 <_gp+0xffff7cec>
    1bf8:	0109c83a 	sub	r4,zero,r4
    1bfc:	01c00044 	movi	r7,1
    1c00:	003fe306 	br	1b90 <_gp+0xffff7ce8>
    1c04:	00c00044 	movi	r3,1
    1c08:	003fee06 	br	1bc4 <_gp+0xffff7d1c>

00001c0c <__modsi3>:
    1c0c:	20001716 	blt	r4,zero,1c6c <__modsi3+0x60>
    1c10:	000f883a 	mov	r7,zero
    1c14:	2005883a 	mov	r2,r4
    1c18:	28001216 	blt	r5,zero,1c64 <__modsi3+0x58>
    1c1c:	2900162e 	bgeu	r5,r4,1c78 <__modsi3+0x6c>
    1c20:	01800804 	movi	r6,32
    1c24:	00c00044 	movi	r3,1
    1c28:	00000106 	br	1c30 <__modsi3+0x24>
    1c2c:	30000a26 	beq	r6,zero,1c58 <__modsi3+0x4c>
    1c30:	294b883a 	add	r5,r5,r5
    1c34:	31bfffc4 	addi	r6,r6,-1
    1c38:	18c7883a 	add	r3,r3,r3
    1c3c:	293ffb36 	bltu	r5,r4,1c2c <_gp+0xffff7d84>
    1c40:	18000526 	beq	r3,zero,1c58 <__modsi3+0x4c>
    1c44:	1806d07a 	srli	r3,r3,1
    1c48:	11400136 	bltu	r2,r5,1c50 <__modsi3+0x44>
    1c4c:	1145c83a 	sub	r2,r2,r5
    1c50:	280ad07a 	srli	r5,r5,1
    1c54:	183ffb1e 	bne	r3,zero,1c44 <_gp+0xffff7d9c>
    1c58:	38000126 	beq	r7,zero,1c60 <__modsi3+0x54>
    1c5c:	0085c83a 	sub	r2,zero,r2
    1c60:	f800283a 	ret
    1c64:	014bc83a 	sub	r5,zero,r5
    1c68:	003fec06 	br	1c1c <_gp+0xffff7d74>
    1c6c:	0109c83a 	sub	r4,zero,r4
    1c70:	01c00044 	movi	r7,1
    1c74:	003fe706 	br	1c14 <_gp+0xffff7d6c>
    1c78:	00c00044 	movi	r3,1
    1c7c:	003ff106 	br	1c44 <_gp+0xffff7d9c>

00001c80 <__udivsi3>:
    1c80:	200d883a 	mov	r6,r4
    1c84:	2900152e 	bgeu	r5,r4,1cdc <__udivsi3+0x5c>
    1c88:	28001416 	blt	r5,zero,1cdc <__udivsi3+0x5c>
    1c8c:	00800804 	movi	r2,32
    1c90:	00c00044 	movi	r3,1
    1c94:	00000206 	br	1ca0 <__udivsi3+0x20>
    1c98:	10000e26 	beq	r2,zero,1cd4 <__udivsi3+0x54>
    1c9c:	28000516 	blt	r5,zero,1cb4 <__udivsi3+0x34>
    1ca0:	294b883a 	add	r5,r5,r5
    1ca4:	10bfffc4 	addi	r2,r2,-1
    1ca8:	18c7883a 	add	r3,r3,r3
    1cac:	293ffa36 	bltu	r5,r4,1c98 <_gp+0xffff7df0>
    1cb0:	18000826 	beq	r3,zero,1cd4 <__udivsi3+0x54>
    1cb4:	0005883a 	mov	r2,zero
    1cb8:	31400236 	bltu	r6,r5,1cc4 <__udivsi3+0x44>
    1cbc:	314dc83a 	sub	r6,r6,r5
    1cc0:	10c4b03a 	or	r2,r2,r3
    1cc4:	1806d07a 	srli	r3,r3,1
    1cc8:	280ad07a 	srli	r5,r5,1
    1ccc:	183ffa1e 	bne	r3,zero,1cb8 <_gp+0xffff7e10>
    1cd0:	f800283a 	ret
    1cd4:	0005883a 	mov	r2,zero
    1cd8:	f800283a 	ret
    1cdc:	00c00044 	movi	r3,1
    1ce0:	003ff406 	br	1cb4 <_gp+0xffff7e0c>

00001ce4 <__umodsi3>:
    1ce4:	2005883a 	mov	r2,r4
    1ce8:	2900122e 	bgeu	r5,r4,1d34 <__umodsi3+0x50>
    1cec:	28001116 	blt	r5,zero,1d34 <__umodsi3+0x50>
    1cf0:	01800804 	movi	r6,32
    1cf4:	00c00044 	movi	r3,1
    1cf8:	00000206 	br	1d04 <__umodsi3+0x20>
    1cfc:	30000c26 	beq	r6,zero,1d30 <__umodsi3+0x4c>
    1d00:	28000516 	blt	r5,zero,1d18 <__umodsi3+0x34>
    1d04:	294b883a 	add	r5,r5,r5
    1d08:	31bfffc4 	addi	r6,r6,-1
    1d0c:	18c7883a 	add	r3,r3,r3
    1d10:	293ffa36 	bltu	r5,r4,1cfc <_gp+0xffff7e54>
    1d14:	18000626 	beq	r3,zero,1d30 <__umodsi3+0x4c>
    1d18:	1806d07a 	srli	r3,r3,1
    1d1c:	11400136 	bltu	r2,r5,1d24 <__umodsi3+0x40>
    1d20:	1145c83a 	sub	r2,r2,r5
    1d24:	280ad07a 	srli	r5,r5,1
    1d28:	183ffb1e 	bne	r3,zero,1d18 <_gp+0xffff7e70>
    1d2c:	f800283a 	ret
    1d30:	f800283a 	ret
    1d34:	00c00044 	movi	r3,1
    1d38:	003ff706 	br	1d18 <_gp+0xffff7e70>
