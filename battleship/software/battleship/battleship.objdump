
battleship.elf:     file format elf32-littlenios2
battleship.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000e70 memsz 0x00000e70 flags r-x
    LOAD off    0x00001e90 vaddr 0x00001e90 paddr 0x00001f00 align 2**12
         filesz 0x00000070 memsz 0x00000070 flags rw-
    LOAD off    0x00001f70 vaddr 0x00001f70 paddr 0x00001f70 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  00001f00  2**0
                  CONTENTS
  2 .text         00000cb4  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001bc  00001cd4  00001cd4  00001cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000070  00001e90  00001f00  00001e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00001f70  00001f70  00001f70  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00001f7c  00001f7c  00001f00  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000290  00000000  00000000  00001f28  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000021ba  00000000  00000000  000021b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000e82  00000000  00000000  00004372  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000f60  00000000  00000000  000051f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003f8  00000000  00000000  00006154  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000b0e  00000000  00000000  0000654c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000e3b  00000000  00000000  0000705a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00007e98  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000128  00000000  00000000  00007ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000090d6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000090d9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000090de  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000090df  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000090e0  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000090e9  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000090f2  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000e  00000000  00000000  000090fb  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000020  00000000  00000000  00009109  2**0
                  CONTENTS, READONLY
 26 .jdi          000040b5  00000000  00000000  00009129  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00050ec9  00000000  00000000  0000d1de  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
00001cd4 l    d  .rodata	00000000 .rodata
00001e90 l    d  .rwdata	00000000 .rwdata
00001f70 l    d  .bss	00000000 .bss
00001f7c l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../battleship_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001af0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00001790 g     F .text	0000002c alt_main
00001f00 g       *ABS*	00000000 __flash_rwdata_start
0000110c g     F .text	00000084 getCoordinates
00001974 g     F .text	00000038 alt_putstr
00001ee8 g     O .rwdata	00000004 jtag_uart
00001afc g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001f74 g     O .bss	00000004 alt_argv
00009ee8 g       *ABS*	00000000 _gp
000019ac g     F .text	00000004 usleep
00001e90 g     O .rwdata	00000030 alt_fd_list
000019d4 g     F .text	0000005c altera_avalon_jtag_uart_read
00001c18 g     F .text	00000064 .hidden __udivsi3
00001eec g     O .rwdata	00000004 alt_max_fd
00001f7c g       *ABS*	00000000 __bss_end
0000166c g     F .text	00000044 alt_getchar
00001094 g     F .text	00000078 send
00001ec0 g     O .rwdata	00000028 alt_dev_null
00001aec g     F .text	00000004 alt_dcache_flush_all
00001f00 g       *ABS*	00000000 __ram_rwdata_end
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory
00001ef0 g     O .rwdata	00000008 alt_dev_list
00001e90 g       *ABS*	00000000 __ram_rodata_end
00001c7c g     F .text	00000058 .hidden __umodsi3
00001f7c g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001a30 g     F .text	00000034 altera_avalon_jtag_uart_write
000017bc g     F .text	00000170 alt_printf
00001020 g     F .text	0000003c _start
000019d0 g     F .text	00000004 alt_sys_init
00001644 g     F .text	00000028 .hidden __mulsi3
00001e90 g       *ABS*	00000000 __ram_rwdata_start
00001cd4 g       *ABS*	00000000 __ram_rodata_start
00001a64 g     F .text	00000088 alt_busy_sleep
00001f7c g       *ABS*	00000000 __alt_stack_base
00001f70 g       *ABS*	00000000 __bss_start
00001204 g     F .text	00000440 main
00001f70 g     O .bss	00000004 alt_envp
00001b20 g     F .text	00000084 .hidden __divsi3
00001cd4 g       *ABS*	00000000 __flash_rodata_start
000019b0 g     F .text	00000020 alt_irq_init
00001f78 g     O .bss	00000004 alt_argc
00001190 g     F .text	00000074 receive
00001ef8 g     O .rwdata	00000008 alt_fs_list
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001f00 g       *ABS*	00000000 _edata
00001f7c g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
0000105c g     F .text	00000038 getPlayerNum
00001ba4 g     F .text	00000074 .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
00001b04 g     F .text	0000001c strlen
0000192c g     F .text	00000048 alt_putchar
00001af8 g     F .text	00000004 alt_icache_flush_all
000016b0 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a7ba14 	ori	gp,gp,40680
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	1087dc14 	ori	r2,r2,8048

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c7df14 	ori	r3,r3,8060

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_gp+0xffff715c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00016b00 	call	16b0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00017900 	call	1790 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <_gp+0xffff7170>

0000105c <getPlayerNum>:
	} while (counter < 17);
	return 0;
}

int getPlayerNum() {
	alt_putstr("Are you player 1 or player 2? \n");
    105c:	01000034 	movhi	r4,0

	} while (counter < 17);
	return 0;
}

int getPlayerNum() {
    1060:	deffff04 	addi	sp,sp,-4
	alt_putstr("Are you player 1 or player 2? \n");
    1064:	21073504 	addi	r4,r4,7380

	} while (counter < 17);
	return 0;
}

int getPlayerNum() {
    1068:	dfc00015 	stw	ra,0(sp)
	alt_putstr("Are you player 1 or player 2? \n");
    106c:	00019740 	call	1974 <alt_putstr>
	int num = alt_getchar();
    1070:	000166c0 	call	166c <alt_getchar>
	if (num == '\n') {
    1074:	00c00284 	movi	r3,10
    1078:	10c0031e 	bne	r2,r3,1088 <getPlayerNum+0x2c>
		num = alt_getchar();
	}

	return num;
}
    107c:	dfc00017 	ldw	ra,0(sp)
    1080:	dec00104 	addi	sp,sp,4

int getPlayerNum() {
	alt_putstr("Are you player 1 or player 2? \n");
	int num = alt_getchar();
	if (num == '\n') {
		num = alt_getchar();
    1084:	000166c1 	jmpi	166c <alt_getchar>
	}

	return num;
}
    1088:	dfc00017 	ldw	ra,0(sp)
    108c:	dec00104 	addi	sp,sp,4
    1090:	f800283a 	ret

00001094 <send>:
	k = k - 48;
	send(h);
	send(k);
}

int send(unsigned int str) {
    1094:	defffe04 	addi	sp,sp,-8
    1098:	dc000015 	stw	r16,0(sp)
    109c:	2021883a 	mov	r16,r4
	alt_putstr("send!\n");
    10a0:	01000034 	movhi	r4,0
    10a4:	21073d04 	addi	r4,r4,7412
	k = k - 48;
	send(h);
	send(k);
}

int send(unsigned int str) {
    10a8:	dfc00115 	stw	ra,4(sp)
	alt_putstr("send!\n");
    10ac:	00019740 	call	1974 <alt_putstr>
	*data_bus_out = str;
    10b0:	0005883a 	mov	r2,zero
    10b4:	14000005 	stb	r16,0(r2)
	*transmit_enable = 0;
    10b8:	008c0c04 	movi	r2,12336
    10bc:	10000005 	stb	zero,0(r2)
	*load = 1;
    10c0:	040c0004 	movi	r16,12288
    10c4:	00800044 	movi	r2,1
    10c8:	80800005 	stb	r2,0(r16)
	usleep(100);
    10cc:	01001904 	movi	r4,100
    10d0:	00019ac0 	call	19ac <usleep>
	*load = 0;
	while (1) {
		if (*character_sent) {
    10d4:	00cc0804 	movi	r3,12320
	alt_putstr("send!\n");
	*data_bus_out = str;
	*transmit_enable = 0;
	*load = 1;
	usleep(100);
	*load = 0;
    10d8:	80000005 	stb	zero,0(r16)
	while (1) {
		if (*character_sent) {
    10dc:	18800003 	ldbu	r2,0(r3)
    10e0:	10803fcc 	andi	r2,r2,255
    10e4:	1080201c 	xori	r2,r2,128
    10e8:	10bfe004 	addi	r2,r2,-128
    10ec:	103ffb26 	beq	r2,zero,10dc <_gp+0xffff71f4>
			usleep(1000);
    10f0:	0100fa04 	movi	r4,1000
    10f4:	00019ac0 	call	19ac <usleep>
		}
	}

	return 0;

}
    10f8:	0005883a 	mov	r2,zero
    10fc:	dfc00117 	ldw	ra,4(sp)
    1100:	dc000017 	ldw	r16,0(sp)
    1104:	dec00204 	addi	sp,sp,8
    1108:	f800283a 	ret

0000110c <getCoordinates>:
	unsigned int h, k;

//	 the following alt_putstr asks and stores
//	 players input

	alt_putstr("> Enter Target:\n");
    110c:	01000034 	movhi	r4,0
//		destroyerCounter = 0;
//	}*/
//
//}
//
void getCoordinates() {
    1110:	defffc04 	addi	sp,sp,-16
	unsigned int h, k;

//	 the following alt_putstr asks and stores
//	 players input

	alt_putstr("> Enter Target:\n");
    1114:	21073f04 	addi	r4,r4,7420
//		destroyerCounter = 0;
//	}*/
//
//}
//
void getCoordinates() {
    1118:	dfc00315 	stw	ra,12(sp)
    111c:	dc800215 	stw	r18,8(sp)
    1120:	dc400115 	stw	r17,4(sp)
    1124:	dc000015 	stw	r16,0(sp)
	unsigned int h, k;

//	 the following alt_putstr asks and stores
//	 players input

	alt_putstr("> Enter Target:\n");
    1128:	00019740 	call	1974 <alt_putstr>
	alt_putstr("> Enter longitude: ");
    112c:	01000034 	movhi	r4,0
    1130:	21074404 	addi	r4,r4,7440
    1134:	00019740 	call	1974 <alt_putstr>
	h = alt_getchar();
    1138:	000166c0 	call	166c <alt_getchar>
	if (h == '\n') {
    113c:	04800284 	movi	r18,10
    1140:	1480011e 	bne	r2,r18,1148 <getCoordinates+0x3c>
		h = alt_getchar();
    1144:	000166c0 	call	166c <alt_getchar>
	}
	h = h - 48;

	alt_putstr("> Enter latitude: ");
    1148:	01000034 	movhi	r4,0
    114c:	21074904 	addi	r4,r4,7460
	alt_putstr("> Enter longitude: ");
	h = alt_getchar();
	if (h == '\n') {
		h = alt_getchar();
	}
	h = h - 48;
    1150:	143ff404 	addi	r16,r2,-48

	alt_putstr("> Enter latitude: ");
    1154:	00019740 	call	1974 <alt_putstr>
	k = alt_getchar();
    1158:	000166c0 	call	166c <alt_getchar>
    115c:	1023883a 	mov	r17,r2
	if (k == '\n') {
    1160:	1480021e 	bne	r2,r18,116c <getCoordinates+0x60>
		k = alt_getchar();
    1164:	000166c0 	call	166c <alt_getchar>
    1168:	1023883a 	mov	r17,r2
	}
	k = k - 48;
	send(h);
    116c:	8009883a 	mov	r4,r16
    1170:	00010940 	call	1094 <send>
	send(k);
    1174:	893ff404 	addi	r4,r17,-48
}
    1178:	dfc00317 	ldw	ra,12(sp)
    117c:	dc800217 	ldw	r18,8(sp)
    1180:	dc400117 	ldw	r17,4(sp)
    1184:	dc000017 	ldw	r16,0(sp)
    1188:	dec00404 	addi	sp,sp,16
	if (k == '\n') {
		k = alt_getchar();
	}
	k = k - 48;
	send(h);
	send(k);
    118c:	00010941 	jmpi	1094 <send>

00001190 <receive>:
	return 0;

}

int receive() {
	alt_putstr("Receive!\n");
    1190:	01000034 	movhi	r4,0

	return 0;

}

int receive() {
    1194:	defffe04 	addi	sp,sp,-8
	alt_putstr("Receive!\n");
    1198:	21074e04 	addi	r4,r4,7480

	return 0;

}

int receive() {
    119c:	dfc00115 	stw	ra,4(sp)
    11a0:	dc000015 	stw	r16,0(sp)
	alt_putstr("Receive!\n");
    11a4:	00019740 	call	1974 <alt_putstr>
	int data = 0;
	*transmit_enable = 1;
    11a8:	00c00044 	movi	r3,1
    11ac:	008c0c04 	movi	r2,12336
    11b0:	10c00005 	stb	r3,0(r2)
	while (1) {
		if (*character_received) {
    11b4:	00cc0404 	movi	r3,12304
    11b8:	18800003 	ldbu	r2,0(r3)
    11bc:	10803fcc 	andi	r2,r2,255
    11c0:	1080201c 	xori	r2,r2,128
    11c4:	10bfe004 	addi	r2,r2,-128
    11c8:	103ffb26 	beq	r2,zero,11b8 <_gp+0xffff72d0>
			usleep(100);
    11cc:	01001904 	movi	r4,100
    11d0:	00019ac0 	call	19ac <usleep>
			data = *data_bus_in;
    11d4:	008c1004 	movi	r2,12352
    11d8:	14000003 	ldbu	r16,0(r2)
    11dc:	84003fcc 	andi	r16,r16,255
    11e0:	8400201c 	xori	r16,r16,128
    11e4:	843fe004 	addi	r16,r16,-128

			alt_putchar(data);
    11e8:	8009883a 	mov	r4,r16
    11ec:	000192c0 	call	192c <alt_putchar>

		}

	}

}
    11f0:	8005883a 	mov	r2,r16
    11f4:	dfc00117 	ldw	ra,4(sp)
    11f8:	dc000017 	ldw	r16,0(sp)
    11fc:	dec00204 	addi	sp,sp,8
    1200:	f800283a 	ret

00001204 <main>:
void getAttacked();
int send(unsigned int str);

int main() {

	alt_putstr("Welcome to Battleship!\n");
    1204:	01000034 	movhi	r4,0
int receive();
int checkShot(int i, int j);
void getAttacked();
int send(unsigned int str);

int main() {
    1208:	deffde04 	addi	sp,sp,-136

	alt_putstr("Welcome to Battleship!\n");
    120c:	21075104 	addi	r4,r4,7492
int receive();
int checkShot(int i, int j);
void getAttacked();
int send(unsigned int str);

int main() {
    1210:	dfc02115 	stw	ra,132(sp)
    1214:	dc801b15 	stw	r18,108(sp)
    1218:	ddc02015 	stw	r23,128(sp)
    121c:	dd801f15 	stw	r22,124(sp)
    1220:	dd401e15 	stw	r21,120(sp)
    1224:	dd001d15 	stw	r20,116(sp)
    1228:	dcc01c15 	stw	r19,112(sp)
    122c:	dc401a15 	stw	r17,104(sp)
    1230:	dc001915 	stw	r16,100(sp)

	alt_putstr("Welcome to Battleship!\n");
    1234:	00019740 	call	1974 <alt_putstr>
	*transmit_enable = 0;
    1238:	008c0c04 	movi	r2,12336
    123c:	10000005 	stb	zero,0(r2)

	int playerNum = getPlayerNum();
    1240:	000105c0 	call	105c <getPlayerNum>
    1244:	1025883a 	mov	r18,r2
	int i, j;

	// puts in water in the 2d array
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			gameBoard[i][j] = WATER_CHAR;
    1248:	01401dc4 	movi	r5,119
int main() {

	alt_putstr("Welcome to Battleship!\n");
	*transmit_enable = 0;

	int playerNum = getPlayerNum();
    124c:	0005883a 	mov	r2,zero

	int i, j;

	// puts in water in the 2d array
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
    1250:	01800284 	movi	r6,10
	int destroyerCounter = 0;

	int i, j;

	// puts in water in the 2d array
	for (i = 0; i < 10; i++) {
    1254:	01c01904 	movi	r7,100
int receive();
int checkShot(int i, int j);
void getAttacked();
int send(unsigned int str);

int main() {
    1258:	0007883a 	mov	r3,zero
	int i, j;

	// puts in water in the 2d array
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			gameBoard[i][j] = WATER_CHAR;
    125c:	1889883a 	add	r4,r3,r2
    1260:	d909883a 	add	r4,sp,r4
    1264:	21400005 	stb	r5,0(r4)

	int i, j;

	// puts in water in the 2d array
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
    1268:	18c00044 	addi	r3,r3,1
    126c:	19bffb1e 	bne	r3,r6,125c <_gp+0xffff7374>
    1270:	10800284 	addi	r2,r2,10
	int destroyerCounter = 0;

	int i, j;

	// puts in water in the 2d array
	for (i = 0; i < 10; i++) {
    1274:	11fff81e 	bne	r2,r7,1258 <_gp+0xffff7370>

	//	 assigns all the different characters
	//	 to different positions in the 2d array

	for (i = 0; i < 4; i++) {
		gameBoard[i + 3][7] = BATTLESHIP_CHAR;
    1278:	00c01884 	movi	r3,98
		gameBoard[9][8 + j] = DESTROYER_CHAR;
	}

	int keepScore = 0;

	alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
    127c:	01000034 	movhi	r4,0

	//	 assigns all the different characters
	//	 to different positions in the 2d array

	for (i = 0; i < 4; i++) {
		gameBoard[i + 3][7] = BATTLESHIP_CHAR;
    1280:	d8c00945 	stb	r3,37(sp)
    1284:	d8c00bc5 	stb	r3,47(sp)
    1288:	d8c00e45 	stb	r3,57(sp)
    128c:	d8c010c5 	stb	r3,67(sp)
		gameBoard[9][8 + j] = DESTROYER_CHAR;
	}

	int keepScore = 0;

	alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
    1290:	21075704 	addi	r4,r4,7516
		gameBoard[i + 3][7] = BATTLESHIP_CHAR;
	}


	for (j = 0; j < 3; j++) {
		gameBoard[7][1 + j] = SUBMARINE_CHAR;
    1294:	00c01cc4 	movi	r3,115
    1298:	d8c011c5 	stb	r3,71(sp)
    129c:	d8c01205 	stb	r3,72(sp)
    12a0:	d8c01245 	stb	r3,73(sp)
	}

	for (j = 0; j < 2; j++) {
		gameBoard[9][8 + j] = DESTROYER_CHAR;
    12a4:	d8801885 	stb	r2,98(sp)
    12a8:	d88018c5 	stb	r2,99(sp)
	}

	int keepScore = 0;

	alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
	for (i = 0; i < 10; i++) {
    12ac:	0023883a 	mov	r17,zero
		gameBoard[9][8 + j] = DESTROYER_CHAR;
	}

	int keepScore = 0;

	alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
    12b0:	00017bc0 	call	17bc <alt_printf>
    12b4:	04c00284 	movi	r19,10
	for (i = 0; i < 10; i++) {
		alt_printf("%x ", i); // prints the vertical row of number
    12b8:	01000034 	movhi	r4,0
    12bc:	880b883a 	mov	r5,r17
    12c0:	21075d04 	addi	r4,r4,7540
    12c4:	00017bc0 	call	17bc <alt_printf>
    12c8:	01400284 	movi	r5,10
    12cc:	8809883a 	mov	r4,r17
    12d0:	00016440 	call	1644 <__mulsi3>
    12d4:	1029883a 	mov	r20,r2
		for (j = 0; j < 10; j++) {
    12d8:	0021883a 	mov	r16,zero
			alt_printf("%c ", gameBoard[i][j]);
    12dc:	8507883a 	add	r3,r16,r20
    12e0:	d8c7883a 	add	r3,sp,r3
    12e4:	19400007 	ldb	r5,0(r3)
    12e8:	01000034 	movhi	r4,0
    12ec:	21075e04 	addi	r4,r4,7544
	int keepScore = 0;

	alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
	for (i = 0; i < 10; i++) {
		alt_printf("%x ", i); // prints the vertical row of number
		for (j = 0; j < 10; j++) {
    12f0:	84000044 	addi	r16,r16,1
			alt_printf("%c ", gameBoard[i][j]);
    12f4:	00017bc0 	call	17bc <alt_printf>
	int keepScore = 0;

	alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
	for (i = 0; i < 10; i++) {
		alt_printf("%x ", i); // prints the vertical row of number
		for (j = 0; j < 10; j++) {
    12f8:	84fff81e 	bne	r16,r19,12dc <_gp+0xffff73f4>
			alt_printf("%c ", gameBoard[i][j]);
		}
		alt_putstr("\n");
    12fc:	01000034 	movhi	r4,0
    1300:	21076704 	addi	r4,r4,7580
	}

	int keepScore = 0;

	alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
	for (i = 0; i < 10; i++) {
    1304:	8c400044 	addi	r17,r17,1
		alt_printf("%x ", i); // prints the vertical row of number
		for (j = 0; j < 10; j++) {
			alt_printf("%c ", gameBoard[i][j]);
		}
		alt_putstr("\n");
    1308:	00019740 	call	1974 <alt_putstr>
	}

	int keepScore = 0;

	alt_printf("  0 1 2 3 4 5 6 7 8 9\n"); // prints the top row of number
	for (i = 0; i < 10; i++) {
    130c:	8c3fea1e 	bne	r17,r16,12b8 <_gp+0xffff73d0>
	unsigned int h;
	unsigned int k;
	int shot;

	do {
		switch (playerNum) {
    1310:	00c00c44 	movi	r3,49
    1314:	00800c84 	movi	r2,50
    1318:	90c00326 	beq	r18,r3,1328 <main+0x124>
    131c:	90bffe1e 	bne	r18,r2,1318 <_gp+0xffff7430>
    1320:	0021883a 	mov	r16,zero
    1324:	00007806 	br	1508 <main+0x304>
    1328:	002b883a 	mov	r21,zero
    132c:	0029883a 	mov	r20,zero
    1330:	0027883a 	mov	r19,zero
    1334:	0021883a 	mov	r16,zero

			// Wait for response to hit

			response = receive();

			switch (response) {
    1338:	05801cc4 	movi	r22,115
		case '1':

			// ATTACK

			// Send a missile
			getCoordinates();
    133c:	000110c0 	call	110c <getCoordinates>

			// Wait for response to hit

			response = receive();
    1340:	00011900 	call	1190 <receive>

			switch (response) {
    1344:	00c01904 	movi	r3,100
    1348:	10c01626 	beq	r2,r3,13a4 <main+0x1a0>
    134c:	18800816 	blt	r3,r2,1370 <main+0x16c>
    1350:	00c01884 	movi	r3,98
    1354:	10c0181e 	bne	r2,r3,13b8 <main+0x1b4>
			case MISS_CHAR :
				alt_putstr("Miss!\n");
				break;
			case BATTLESHIP_CHAR :
				alt_putstr("You hit the battleship! \n");
    1358:	01000034 	movhi	r4,0
    135c:	21076104 	addi	r4,r4,7556
    1360:	00019740 	call	1974 <alt_putstr>
				counter++;
    1364:	84000044 	addi	r16,r16,1
				battleshipCounter++;
    1368:	9cc00044 	addi	r19,r19,1
				break;
    136c:	00001206 	br	13b8 <main+0x1b4>

			// Wait for response to hit

			response = receive();

			switch (response) {
    1370:	15800626 	beq	r2,r22,138c <main+0x188>
    1374:	00c01e04 	movi	r3,120
    1378:	10c00f1e 	bne	r2,r3,13b8 <main+0x1b4>
			case MISS_CHAR :
				alt_putstr("Miss!\n");
    137c:	01000034 	movhi	r4,0
    1380:	21075f04 	addi	r4,r4,7548
    1384:	00019740 	call	1974 <alt_putstr>
				break;
    1388:	00000b06 	br	13b8 <main+0x1b4>
				alt_putstr("You hit the battleship! \n");
				counter++;
				battleshipCounter++;
				break;
			case SUBMARINE_CHAR :
				alt_putstr("You hit the submarine! \n");
    138c:	01000034 	movhi	r4,0
    1390:	21076804 	addi	r4,r4,7584
    1394:	00019740 	call	1974 <alt_putstr>
				counter++;
    1398:	84000044 	addi	r16,r16,1
				submarineCounter++;
    139c:	a5000044 	addi	r20,r20,1
				break;
    13a0:	00000506 	br	13b8 <main+0x1b4>
			case DESTROYER_CHAR :
				alt_putstr("You hit the destroyer! \n");
    13a4:	01000034 	movhi	r4,0
    13a8:	21076f04 	addi	r4,r4,7612
    13ac:	00019740 	call	1974 <alt_putstr>
				counter++;
    13b0:	84000044 	addi	r16,r16,1
				destroyerCounter++;
    13b4:	ad400044 	addi	r21,r21,1

			//	 The following checks if a certain ship is hit certain
			//	 number of times and output the message to the user
			//	 saying that the have drowned that particular ship

			if (battleshipCounter == 4) {
    13b8:	00800104 	movi	r2,4
    13bc:	9880051e 	bne	r19,r2,13d4 <main+0x1d0>
				alt_putstr("You just drowned the battleship\n");
    13c0:	01000034 	movhi	r4,0
    13c4:	21077604 	addi	r4,r4,7640
    13c8:	00019740 	call	1974 <alt_putstr>
				battleshipCounter = 0;
    13cc:	0027883a 	mov	r19,zero
    13d0:	00000d06 	br	1408 <main+0x204>
			} else if (submarineCounter == 3) {
    13d4:	008000c4 	movi	r2,3
    13d8:	a080051e 	bne	r20,r2,13f0 <main+0x1ec>
				alt_putstr("You just drowned the submarine\n");
    13dc:	01000034 	movhi	r4,0
    13e0:	21077f04 	addi	r4,r4,7676
    13e4:	00019740 	call	1974 <alt_putstr>
				submarineCounter = 0;
    13e8:	0029883a 	mov	r20,zero
    13ec:	00000606 	br	1408 <main+0x204>
			} else if (destroyerCounter == 2) {
    13f0:	00800084 	movi	r2,2
    13f4:	a880041e 	bne	r21,r2,1408 <main+0x204>
				alt_putstr("You just drowned the destroyer\n");
    13f8:	01000034 	movhi	r4,0
    13fc:	21078704 	addi	r4,r4,7708
    1400:	00019740 	call	1974 <alt_putstr>
				destroyerCounter = 0;
    1404:	002b883a 	mov	r21,zero
			}

			// Get attacked
			h = receive();
    1408:	00011900 	call	1190 <receive>
    140c:	102f883a 	mov	r23,r2
			k = receive();
    1410:	00011900 	call	1190 <receive>

			alt_putchar(h);
    1414:	b809883a 	mov	r4,r23
				destroyerCounter = 0;
			}

			// Get attacked
			h = receive();
			k = receive();
    1418:	1023883a 	mov	r17,r2

			alt_putchar(h);
    141c:	000192c0 	call	192c <alt_putchar>
			alt_putchar(k);
    1420:	8809883a 	mov	r4,r17
    1424:	000192c0 	call	192c <alt_putchar>
			//	 the player hit, miss, or has he already used that input

			// CHECK SHOT
			shot = 0;

			switch (gameBoard[h][k]) {
    1428:	01400284 	movi	r5,10
    142c:	b809883a 	mov	r4,r23
    1430:	00016440 	call	1644 <__mulsi3>
    1434:	d885883a 	add	r2,sp,r2
    1438:	1445883a 	add	r2,r2,r17
    143c:	14800007 	ldb	r18,0(r2)
    1440:	b4800616 	blt	r22,r18,145c <main+0x258>
    1444:	00801c84 	movi	r2,114
    1448:	90804e0e 	bge	r18,r2,1584 <main+0x380>
    144c:	90bfe784 	addi	r2,r18,-98
    1450:	00c00084 	movi	r3,2
    1454:	18805836 	bltu	r3,r2,15b8 <main+0x3b4>
    1458:	00004a06 	br	1584 <main+0x380>
    145c:	00801dc4 	movi	r2,119
    1460:	9080551e 	bne	r18,r2,15b8 <main+0x3b4>
			//	 or a miss or if the user has already used those
			//	 coordinates

			switch (shot) {
			case 0:
				alt_putstr("Miss!\n");
    1464:	01000034 	movhi	r4,0
    1468:	21075f04 	addi	r4,r4,7548
    146c:	00019740 	call	1974 <alt_putstr>
				gameBoard[h][k] = MISS_CHAR;
    1470:	b809883a 	mov	r4,r23
    1474:	01400284 	movi	r5,10
    1478:	00016440 	call	1644 <__mulsi3>
    147c:	d885883a 	add	r2,sp,r2
    1480:	1463883a 	add	r17,r2,r17
				send(MISS_CHAR);
    1484:	01001e04 	movi	r4,120
			//	 coordinates

			switch (shot) {
			case 0:
				alt_putstr("Miss!\n");
				gameBoard[h][k] = MISS_CHAR;
    1488:	00801e04 	movi	r2,120
    148c:	88800005 	stb	r2,0(r17)
				send(MISS_CHAR);
    1490:	00010940 	call	1094 <send>
				break;
    1494:	00005d06 	br	160c <main+0x408>
			//	 the player hit, miss, or has he already used that input

			// CHECK SHOT
			shot = 0;

			switch (gameBoard[h][k]) {
    1498:	00801dc4 	movi	r2,119
    149c:	9080571e 	bne	r18,r2,15fc <main+0x3f8>
			//	 or a miss or if the user has already used those
			//	 coordinates

			switch (shot) {
			case 0:
				alt_putstr("Miss!\n");
    14a0:	01000034 	movhi	r4,0
    14a4:	21075f04 	addi	r4,r4,7548
    14a8:	00019740 	call	1974 <alt_putstr>
				gameBoard[h][k] = MISS_CHAR;
    14ac:	9809883a 	mov	r4,r19
    14b0:	01400284 	movi	r5,10
    14b4:	00016440 	call	1644 <__mulsi3>
    14b8:	d885883a 	add	r2,sp,r2
    14bc:	1463883a 	add	r17,r2,r17
				send(MISS_CHAR);
    14c0:	01001e04 	movi	r4,120
			//	 coordinates

			switch (shot) {
			case 0:
				alt_putstr("Miss!\n");
				gameBoard[h][k] = MISS_CHAR;
    14c4:	00801e04 	movi	r2,120
    14c8:	88800005 	stb	r2,0(r17)
				send(MISS_CHAR);
    14cc:	00010940 	call	1094 <send>
			}

			// ATTACK

			// Send a missile
			getCoordinates();
    14d0:	000110c0 	call	110c <getCoordinates>

			// Wait for response to hit

			response = receive();
    14d4:	00011900 	call	1190 <receive>

			switch (response) {
    14d8:	00c01904 	movi	r3,100
    14dc:	04400404 	movi	r17,16
    14e0:	10c02526 	beq	r2,r3,1578 <main+0x374>
    14e4:	18801a0e 	bge	r3,r2,1550 <main+0x34c>
    14e8:	00c01cc4 	movi	r3,115
    14ec:	10c01d26 	beq	r2,r3,1564 <main+0x360>
    14f0:	00c01e04 	movi	r3,120
    14f4:	10c0031e 	bne	r2,r3,1504 <main+0x300>
			case MISS_CHAR :
				alt_putstr("Miss!\n");
    14f8:	01000034 	movhi	r4,0
    14fc:	21075f04 	addi	r4,r4,7548
    1500:	00019740 	call	1974 <alt_putstr>

		}

		keepScore++; // how many turns did the player take to win

	} while (counter < 17);
    1504:	8c004316 	blt	r17,r16,1614 <main+0x410>

			break;
		case '2':

			// Get attacked
			h = receive();
    1508:	00011900 	call	1190 <receive>
    150c:	1027883a 	mov	r19,r2
			k = receive();
    1510:	00011900 	call	1190 <receive>
			//	 the player hit, miss, or has he already used that input

			// CHECK SHOT
			shot = 0;

			switch (gameBoard[h][k]) {
    1514:	01400284 	movi	r5,10
    1518:	9809883a 	mov	r4,r19
			break;
		case '2':

			// Get attacked
			h = receive();
			k = receive();
    151c:	1023883a 	mov	r17,r2
			//	 the player hit, miss, or has he already used that input

			// CHECK SHOT
			shot = 0;

			switch (gameBoard[h][k]) {
    1520:	00016440 	call	1644 <__mulsi3>
    1524:	d885883a 	add	r2,sp,r2
    1528:	1445883a 	add	r2,r2,r17
    152c:	14800007 	ldb	r18,0(r2)
    1530:	00801cc4 	movi	r2,115
    1534:	14bfd816 	blt	r2,r18,1498 <_gp+0xffff75b0>
    1538:	00801c84 	movi	r2,114
    153c:	9080220e 	bge	r18,r2,15c8 <main+0x3c4>
    1540:	90bfe784 	addi	r2,r18,-98
    1544:	00c00084 	movi	r3,2
    1548:	18802c36 	bltu	r3,r2,15fc <main+0x3f8>
    154c:	00001e06 	br	15c8 <main+0x3c4>

			// Wait for response to hit

			response = receive();

			switch (response) {
    1550:	00c01884 	movi	r3,98
    1554:	10ffeb1e 	bne	r2,r3,1504 <_gp+0xffff761c>
			case MISS_CHAR :
				alt_putstr("Miss!\n");
				break;
			case BATTLESHIP_CHAR :
				alt_putstr("You hit the battleship! \n");
    1558:	01000034 	movhi	r4,0
    155c:	21076104 	addi	r4,r4,7556
    1560:	00000206 	br	156c <main+0x368>
				counter++;
				battleshipCounter++;
				break;
			case SUBMARINE_CHAR :
				alt_putstr("You hit the submarine! \n");
    1564:	01000034 	movhi	r4,0
    1568:	21076804 	addi	r4,r4,7584
    156c:	00019740 	call	1974 <alt_putstr>
				counter++;
    1570:	84000044 	addi	r16,r16,1
				submarineCounter++;
				break;
    1574:	003fe306 	br	1504 <_gp+0xffff761c>
			case DESTROYER_CHAR :
				alt_putstr("You hit the destroyer! \n");
    1578:	01000034 	movhi	r4,0
    157c:	21076f04 	addi	r4,r4,7612
    1580:	003ffa06 	br	156c <_gp+0xffff7684>
				alt_putstr("Miss!\n");
				gameBoard[h][k] = MISS_CHAR;
				send(MISS_CHAR);
				break;
			case 1:
				alt_putstr("It was a hit! \n");
    1584:	01000034 	movhi	r4,0
    1588:	21078f04 	addi	r4,r4,7740
    158c:	00019740 	call	1974 <alt_putstr>
				send(gameBoard[h][k]);
    1590:	9009883a 	mov	r4,r18
    1594:	00010940 	call	1094 <send>
				gameBoard[h][k] = HIT_CHAR;
    1598:	01400284 	movi	r5,10
    159c:	b809883a 	mov	r4,r23
    15a0:	00016440 	call	1644 <__mulsi3>
    15a4:	d885883a 	add	r2,sp,r2
    15a8:	1463883a 	add	r17,r2,r17
    15ac:	00801b44 	movi	r2,109
    15b0:	88800005 	stb	r2,0(r17)
				break;
    15b4:	00001506 	br	160c <main+0x408>
			case 2:
				alt_putstr(
    15b8:	01000034 	movhi	r4,0
    15bc:	21079304 	addi	r4,r4,7756
    15c0:	00019740 	call	1974 <alt_putstr>
						"Please pick another value you have already chosen that\n");
				break;
    15c4:	00001106 	br	160c <main+0x408>
				alt_putstr("Miss!\n");
				gameBoard[h][k] = MISS_CHAR;
				send(MISS_CHAR);
				break;
			case 1:
				alt_putstr("It was a hit! \n");
    15c8:	01000034 	movhi	r4,0
    15cc:	21078f04 	addi	r4,r4,7740
    15d0:	00019740 	call	1974 <alt_putstr>
				send(gameBoard[h][k]);
    15d4:	9009883a 	mov	r4,r18
    15d8:	00010940 	call	1094 <send>
				gameBoard[h][k] = HIT_CHAR;
    15dc:	01400284 	movi	r5,10
    15e0:	9809883a 	mov	r4,r19
    15e4:	00016440 	call	1644 <__mulsi3>
    15e8:	d885883a 	add	r2,sp,r2
    15ec:	1463883a 	add	r17,r2,r17
    15f0:	00801b44 	movi	r2,109
    15f4:	88800005 	stb	r2,0(r17)
				break;
    15f8:	003fb506 	br	14d0 <_gp+0xffff75e8>
			case 2:
				alt_putstr(
    15fc:	01000034 	movhi	r4,0
    1600:	21079304 	addi	r4,r4,7756
    1604:	00019740 	call	1974 <alt_putstr>
						"Please pick another value you have already chosen that\n");
				break;
    1608:	003fb106 	br	14d0 <_gp+0xffff75e8>

		}

		keepScore++; // how many turns did the player take to win

	} while (counter < 17);
    160c:	00800404 	movi	r2,16
    1610:	143f4a0e 	bge	r2,r16,133c <_gp+0xffff7454>
	return 0;
}
    1614:	0005883a 	mov	r2,zero
    1618:	dfc02117 	ldw	ra,132(sp)
    161c:	ddc02017 	ldw	r23,128(sp)
    1620:	dd801f17 	ldw	r22,124(sp)
    1624:	dd401e17 	ldw	r21,120(sp)
    1628:	dd001d17 	ldw	r20,116(sp)
    162c:	dcc01c17 	ldw	r19,112(sp)
    1630:	dc801b17 	ldw	r18,108(sp)
    1634:	dc401a17 	ldw	r17,104(sp)
    1638:	dc001917 	ldw	r16,100(sp)
    163c:	dec02204 	addi	sp,sp,136
    1640:	f800283a 	ret

00001644 <__mulsi3>:
    1644:	0005883a 	mov	r2,zero
    1648:	20000726 	beq	r4,zero,1668 <__mulsi3+0x24>
    164c:	20c0004c 	andi	r3,r4,1
    1650:	2008d07a 	srli	r4,r4,1
    1654:	18000126 	beq	r3,zero,165c <__mulsi3+0x18>
    1658:	1145883a 	add	r2,r2,r5
    165c:	294b883a 	add	r5,r5,r5
    1660:	203ffa1e 	bne	r4,zero,164c <_gp+0xffff7764>
    1664:	f800283a 	ret
    1668:	f800283a 	ret

0000166c <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    166c:	00800034 	movhi	r2,0
    1670:	1087a404 	addi	r2,r2,7824
    1674:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    1678:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    167c:	01000034 	movhi	r4,0
    1680:	01800044 	movi	r6,1
    1684:	d80b883a 	mov	r5,sp
    1688:	2107ba04 	addi	r4,r4,7912
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    168c:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    1690:	00019d40 	call	19d4 <altera_avalon_jtag_uart_read>
    1694:	0080020e 	bge	zero,r2,16a0 <alt_getchar+0x34>
        return -1;
    }
    return c;
    1698:	d8800007 	ldb	r2,0(sp)
    169c:	00000106 	br	16a4 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    16a0:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
    16a4:	dfc00117 	ldw	ra,4(sp)
    16a8:	dec00204 	addi	sp,sp,8
    16ac:	f800283a 	ret

000016b0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    16b0:	deffff04 	addi	sp,sp,-4
    16b4:	01000034 	movhi	r4,0
    16b8:	01400034 	movhi	r5,0
    16bc:	dfc00015 	stw	ra,0(sp)
    16c0:	2107a404 	addi	r4,r4,7824
    16c4:	2947c004 	addi	r5,r5,7936

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    16c8:	2140061e 	bne	r4,r5,16e4 <alt_load+0x34>
    16cc:	01000034 	movhi	r4,0
    16d0:	01400034 	movhi	r5,0
    16d4:	21040804 	addi	r4,r4,4128
    16d8:	29440804 	addi	r5,r5,4128
    16dc:	2140121e 	bne	r4,r5,1728 <alt_load+0x78>
    16e0:	00000b06 	br	1710 <alt_load+0x60>
    16e4:	00c00034 	movhi	r3,0
    16e8:	18c7c004 	addi	r3,r3,7936
    16ec:	1907c83a 	sub	r3,r3,r4
    16f0:	0005883a 	mov	r2,zero
  {
    while( to != end )
    16f4:	10fff526 	beq	r2,r3,16cc <_gp+0xffff77e4>
    {
      *to++ = *from++;
    16f8:	114f883a 	add	r7,r2,r5
    16fc:	39c00017 	ldw	r7,0(r7)
    1700:	110d883a 	add	r6,r2,r4
    1704:	10800104 	addi	r2,r2,4
    1708:	31c00015 	stw	r7,0(r6)
    170c:	003ff906 	br	16f4 <_gp+0xffff780c>
    1710:	01000034 	movhi	r4,0
    1714:	01400034 	movhi	r5,0
    1718:	21073504 	addi	r4,r4,7380
    171c:	29473504 	addi	r5,r5,7380

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1720:	2140101e 	bne	r4,r5,1764 <alt_load+0xb4>
    1724:	00000b06 	br	1754 <alt_load+0xa4>
    1728:	00c00034 	movhi	r3,0
    172c:	18c40804 	addi	r3,r3,4128
    1730:	1907c83a 	sub	r3,r3,r4
    1734:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1738:	10fff526 	beq	r2,r3,1710 <_gp+0xffff7828>
    {
      *to++ = *from++;
    173c:	114f883a 	add	r7,r2,r5
    1740:	39c00017 	ldw	r7,0(r7)
    1744:	110d883a 	add	r6,r2,r4
    1748:	10800104 	addi	r2,r2,4
    174c:	31c00015 	stw	r7,0(r6)
    1750:	003ff906 	br	1738 <_gp+0xffff7850>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1754:	0001aec0 	call	1aec <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1758:	dfc00017 	ldw	ra,0(sp)
    175c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    1760:	0001af81 	jmpi	1af8 <alt_icache_flush_all>
    1764:	00c00034 	movhi	r3,0
    1768:	18c7a404 	addi	r3,r3,7824
    176c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1770:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1774:	18bff726 	beq	r3,r2,1754 <_gp+0xffff786c>
    {
      *to++ = *from++;
    1778:	114f883a 	add	r7,r2,r5
    177c:	39c00017 	ldw	r7,0(r7)
    1780:	110d883a 	add	r6,r2,r4
    1784:	10800104 	addi	r2,r2,4
    1788:	31c00015 	stw	r7,0(r6)
    178c:	003ff906 	br	1774 <_gp+0xffff788c>

00001790 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1790:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1794:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1798:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    179c:	00019b00 	call	19b0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    17a0:	00019d00 	call	19d0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    17a4:	d1a02217 	ldw	r6,-32632(gp)
    17a8:	d1602317 	ldw	r5,-32628(gp)
    17ac:	d1202417 	ldw	r4,-32624(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    17b0:	dfc00017 	ldw	ra,0(sp)
    17b4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    17b8:	00012041 	jmpi	1204 <main>

000017bc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    17bc:	defff204 	addi	sp,sp,-56
    17c0:	2005883a 	mov	r2,r4
    17c4:	dfc00a15 	stw	ra,40(sp)
    17c8:	df000915 	stw	fp,36(sp)
    17cc:	ddc00815 	stw	r23,32(sp)
    17d0:	dd800715 	stw	r22,28(sp)
    17d4:	dd400615 	stw	r21,24(sp)
    17d8:	dd000515 	stw	r20,20(sp)
    17dc:	dcc00415 	stw	r19,16(sp)
    17e0:	dc800315 	stw	r18,12(sp)
    17e4:	dc400215 	stw	r17,8(sp)
    17e8:	dc000115 	stw	r16,4(sp)
    17ec:	d9400b15 	stw	r5,44(sp)
    17f0:	d9800c15 	stw	r6,48(sp)
    17f4:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    17f8:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
    17fc:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    1800:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
    1804:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    1808:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    180c:	11000007 	ldb	r4,0(r2)
    1810:	20003a26 	beq	r4,zero,18fc <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    1814:	24000226 	beq	r4,r16,1820 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    1818:	14400044 	addi	r17,r2,1
    181c:	00001406 	br	1870 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    1820:	14400084 	addi	r17,r2,2
    1824:	10800047 	ldb	r2,1(r2)
    1828:	10003426 	beq	r2,zero,18fc <alt_printf+0x140>
            {
                if (c == '%')
    182c:	1400021e 	bne	r2,r16,1838 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    1830:	8009883a 	mov	r4,r16
    1834:	00000e06 	br	1870 <alt_printf+0xb4>
                } 
                else if (c == 'c')
    1838:	1480051e 	bne	r2,r18,1850 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
    183c:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    1840:	ad800104 	addi	r22,r21,4
    1844:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
    1848:	000192c0 	call	192c <alt_putchar>
    184c:	00002906 	br	18f4 <alt_printf+0x138>
                }
                else if (c == 'x')
    1850:	14c0201e 	bne	r2,r19,18d4 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    1854:	adc00017 	ldw	r23,0(r21)
    1858:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    185c:	b8000326 	beq	r23,zero,186c <alt_printf+0xb0>
    1860:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    1864:	00c003c4 	movi	r3,15
    1868:	00000306 	br	1878 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
    186c:	01000c04 	movi	r4,48
    1870:	000192c0 	call	192c <alt_putchar>
                        continue;
    1874:	00001f06 	br	18f4 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    1878:	1d84983a 	sll	r2,r3,r22
    187c:	15c4703a 	and	r2,r2,r23
    1880:	1000021e 	bne	r2,zero,188c <alt_printf+0xd0>
                        digit_shift -= 4;
    1884:	b5bfff04 	addi	r22,r22,-4
    1888:	003ffb06 	br	1878 <_gp+0xffff7990>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    188c:	070003c4 	movi	fp,15
                        if (digit <= 9)
    1890:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    1894:	b0001716 	blt	r22,zero,18f4 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    1898:	e588983a 	sll	r4,fp,r22
    189c:	25c8703a 	and	r4,r4,r23
    18a0:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
    18a4:	19000236 	bltu	r3,r4,18b0 <alt_printf+0xf4>
                            c = '0' + digit;
    18a8:	21000c04 	addi	r4,r4,48
    18ac:	00000106 	br	18b4 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
    18b0:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
    18b4:	21003fcc 	andi	r4,r4,255
    18b8:	2100201c 	xori	r4,r4,128
    18bc:	213fe004 	addi	r4,r4,-128
    18c0:	d8c00015 	stw	r3,0(sp)
    18c4:	000192c0 	call	192c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    18c8:	b5bfff04 	addi	r22,r22,-4
    18cc:	d8c00017 	ldw	r3,0(sp)
    18d0:	003ff006 	br	1894 <_gp+0xffff79ac>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    18d4:	1500071e 	bne	r2,r20,18f4 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    18d8:	ad800017 	ldw	r22,0(r21)
    18dc:	ad400104 	addi	r21,r21,4

                    while(*s)
    18e0:	b1000007 	ldb	r4,0(r22)
    18e4:	20000326 	beq	r4,zero,18f4 <alt_printf+0x138>
                      alt_putchar(*s++);
    18e8:	b5800044 	addi	r22,r22,1
    18ec:	000192c0 	call	192c <alt_putchar>
    18f0:	003ffb06 	br	18e0 <_gp+0xffff79f8>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    18f4:	8805883a 	mov	r2,r17
    18f8:	003fc406 	br	180c <_gp+0xffff7924>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    18fc:	dfc00a17 	ldw	ra,40(sp)
    1900:	df000917 	ldw	fp,36(sp)
    1904:	ddc00817 	ldw	r23,32(sp)
    1908:	dd800717 	ldw	r22,28(sp)
    190c:	dd400617 	ldw	r21,24(sp)
    1910:	dd000517 	ldw	r20,20(sp)
    1914:	dcc00417 	ldw	r19,16(sp)
    1918:	dc800317 	ldw	r18,12(sp)
    191c:	dc400217 	ldw	r17,8(sp)
    1920:	dc000117 	ldw	r16,4(sp)
    1924:	dec00e04 	addi	sp,sp,56
    1928:	f800283a 	ret

0000192c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    192c:	defffd04 	addi	sp,sp,-12
    1930:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    1934:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    1938:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    193c:	01000034 	movhi	r4,0
    1940:	000f883a 	mov	r7,zero
    1944:	01800044 	movi	r6,1
    1948:	d80b883a 	mov	r5,sp
    194c:	2107ba04 	addi	r4,r4,7912
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    1950:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    1954:	0001a300 	call	1a30 <altera_avalon_jtag_uart_write>
    1958:	00ffffc4 	movi	r3,-1
    195c:	10c00126 	beq	r2,r3,1964 <alt_putchar+0x38>
        return -1;
    }
    return c;
    1960:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    1964:	dfc00217 	ldw	ra,8(sp)
    1968:	dc000117 	ldw	r16,4(sp)
    196c:	dec00304 	addi	sp,sp,12
    1970:	f800283a 	ret

00001974 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    1974:	defffe04 	addi	sp,sp,-8
    1978:	dc000015 	stw	r16,0(sp)
    197c:	dfc00115 	stw	ra,4(sp)
    1980:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    1984:	0001b040 	call	1b04 <strlen>
    1988:	01000034 	movhi	r4,0
    198c:	000f883a 	mov	r7,zero
    1990:	100d883a 	mov	r6,r2
    1994:	800b883a 	mov	r5,r16
    1998:	2107ba04 	addi	r4,r4,7912
#else
    return fputs(str, stdout);
#endif
#endif
}
    199c:	dfc00117 	ldw	ra,4(sp)
    19a0:	dc000017 	ldw	r16,0(sp)
    19a4:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    19a8:	0001a301 	jmpi	1a30 <altera_avalon_jtag_uart_write>

000019ac <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    19ac:	0001a641 	jmpi	1a64 <alt_busy_sleep>

000019b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    19b0:	deffff04 	addi	sp,sp,-4
    19b4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
    19b8:	0001afc0 	call	1afc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    19bc:	00800044 	movi	r2,1
    19c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    19c4:	dfc00017 	ldw	ra,0(sp)
    19c8:	dec00104 	addi	sp,sp,4
    19cc:	f800283a 	ret

000019d0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    19d0:	f800283a 	ret

000019d4 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    19d4:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
    19d8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    19dc:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    19e0:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    19e4:	11800b2e 	bgeu	r2,r6,1a14 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    19e8:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    19ec:	1a60000c 	andi	r9,r3,32768
    19f0:	48000326 	beq	r9,zero,1a00 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    19f4:	10c00005 	stb	r3,0(r2)
    19f8:	10800044 	addi	r2,r2,1
    19fc:	003ff906 	br	19e4 <_gp+0xffff7afc>
    else if (ptr != buffer)
    1a00:	11400226 	beq	r2,r5,1a0c <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
    1a04:	1145c83a 	sub	r2,r2,r5
    1a08:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    1a0c:	403ff526 	beq	r8,zero,19e4 <_gp+0xffff7afc>
    1a10:	00000106 	br	1a18 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
    1a14:	117ffb1e 	bne	r2,r5,1a04 <_gp+0xffff7b1c>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    1a18:	39d0000c 	andi	r7,r7,16384
    1a1c:	3800021e 	bne	r7,zero,1a28 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
    1a20:	00bffec4 	movi	r2,-5
    1a24:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    1a28:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    1a2c:	f800283a 	ret

00001a30 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1a30:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1a34:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    1a38:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1a3c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1a40:	2980072e 	bgeu	r5,r6,1a60 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1a44:	38c00037 	ldwio	r3,0(r7)
    1a48:	18ffffec 	andhi	r3,r3,65535
    1a4c:	183ffc26 	beq	r3,zero,1a40 <_gp+0xffff7b58>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1a50:	28c00007 	ldb	r3,0(r5)
    1a54:	20c00035 	stwio	r3,0(r4)
    1a58:	29400044 	addi	r5,r5,1
    1a5c:	003ff806 	br	1a40 <_gp+0xffff7b58>

  return count;
}
    1a60:	f800283a 	ret

00001a64 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1a64:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    1a68:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1a6c:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    1a70:	dc000015 	stw	r16,0(sp)
    1a74:	dfc00115 	stw	ra,4(sp)
    1a78:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    1a7c:	0001c180 	call	1c18 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1a80:	10001026 	beq	r2,zero,1ac4 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1a84:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1a88:	013999b4 	movhi	r4,58982
    1a8c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1a90:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1a94:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    1a98:	297fffc4 	addi	r5,r5,-1
    1a9c:	283ffe1e 	bne	r5,zero,1a98 <_gp+0xffff7bb0>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1aa0:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    1aa4:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    1aa8:	18bffb16 	blt	r3,r2,1a98 <_gp+0xffff7bb0>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1aac:	01400144 	movi	r5,5
    1ab0:	8009883a 	mov	r4,r16
    1ab4:	00016440 	call	1644 <__mulsi3>
    1ab8:	10bfffc4 	addi	r2,r2,-1
    1abc:	103ffe1e 	bne	r2,zero,1ab8 <_gp+0xffff7bd0>
    1ac0:	00000506 	br	1ad8 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1ac4:	01400144 	movi	r5,5
    1ac8:	8009883a 	mov	r4,r16
    1acc:	00016440 	call	1644 <__mulsi3>
    1ad0:	10bfffc4 	addi	r2,r2,-1
    1ad4:	00bffe16 	blt	zero,r2,1ad0 <_gp+0xffff7be8>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    1ad8:	0005883a 	mov	r2,zero
    1adc:	dfc00117 	ldw	ra,4(sp)
    1ae0:	dc000017 	ldw	r16,0(sp)
    1ae4:	dec00204 	addi	sp,sp,8
    1ae8:	f800283a 	ret

00001aec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1aec:	f800283a 	ret

00001af0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    1af0:	3005883a 	mov	r2,r6
    1af4:	f800283a 	ret

00001af8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1af8:	f800283a 	ret

00001afc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1afc:	000170fa 	wrctl	ienable,zero
    1b00:	f800283a 	ret

00001b04 <strlen>:
    1b04:	2005883a 	mov	r2,r4
    1b08:	10c00007 	ldb	r3,0(r2)
    1b0c:	18000226 	beq	r3,zero,1b18 <strlen+0x14>
    1b10:	10800044 	addi	r2,r2,1
    1b14:	003ffc06 	br	1b08 <_gp+0xffff7c20>
    1b18:	1105c83a 	sub	r2,r2,r4
    1b1c:	f800283a 	ret

00001b20 <__divsi3>:
    1b20:	20001b16 	blt	r4,zero,1b90 <__divsi3+0x70>
    1b24:	000f883a 	mov	r7,zero
    1b28:	28001616 	blt	r5,zero,1b84 <__divsi3+0x64>
    1b2c:	200d883a 	mov	r6,r4
    1b30:	29001a2e 	bgeu	r5,r4,1b9c <__divsi3+0x7c>
    1b34:	00800804 	movi	r2,32
    1b38:	00c00044 	movi	r3,1
    1b3c:	00000106 	br	1b44 <__divsi3+0x24>
    1b40:	10000d26 	beq	r2,zero,1b78 <__divsi3+0x58>
    1b44:	294b883a 	add	r5,r5,r5
    1b48:	10bfffc4 	addi	r2,r2,-1
    1b4c:	18c7883a 	add	r3,r3,r3
    1b50:	293ffb36 	bltu	r5,r4,1b40 <_gp+0xffff7c58>
    1b54:	0005883a 	mov	r2,zero
    1b58:	18000726 	beq	r3,zero,1b78 <__divsi3+0x58>
    1b5c:	0005883a 	mov	r2,zero
    1b60:	31400236 	bltu	r6,r5,1b6c <__divsi3+0x4c>
    1b64:	314dc83a 	sub	r6,r6,r5
    1b68:	10c4b03a 	or	r2,r2,r3
    1b6c:	1806d07a 	srli	r3,r3,1
    1b70:	280ad07a 	srli	r5,r5,1
    1b74:	183ffa1e 	bne	r3,zero,1b60 <_gp+0xffff7c78>
    1b78:	38000126 	beq	r7,zero,1b80 <__divsi3+0x60>
    1b7c:	0085c83a 	sub	r2,zero,r2
    1b80:	f800283a 	ret
    1b84:	014bc83a 	sub	r5,zero,r5
    1b88:	39c0005c 	xori	r7,r7,1
    1b8c:	003fe706 	br	1b2c <_gp+0xffff7c44>
    1b90:	0109c83a 	sub	r4,zero,r4
    1b94:	01c00044 	movi	r7,1
    1b98:	003fe306 	br	1b28 <_gp+0xffff7c40>
    1b9c:	00c00044 	movi	r3,1
    1ba0:	003fee06 	br	1b5c <_gp+0xffff7c74>

00001ba4 <__modsi3>:
    1ba4:	20001716 	blt	r4,zero,1c04 <__modsi3+0x60>
    1ba8:	000f883a 	mov	r7,zero
    1bac:	2005883a 	mov	r2,r4
    1bb0:	28001216 	blt	r5,zero,1bfc <__modsi3+0x58>
    1bb4:	2900162e 	bgeu	r5,r4,1c10 <__modsi3+0x6c>
    1bb8:	01800804 	movi	r6,32
    1bbc:	00c00044 	movi	r3,1
    1bc0:	00000106 	br	1bc8 <__modsi3+0x24>
    1bc4:	30000a26 	beq	r6,zero,1bf0 <__modsi3+0x4c>
    1bc8:	294b883a 	add	r5,r5,r5
    1bcc:	31bfffc4 	addi	r6,r6,-1
    1bd0:	18c7883a 	add	r3,r3,r3
    1bd4:	293ffb36 	bltu	r5,r4,1bc4 <_gp+0xffff7cdc>
    1bd8:	18000526 	beq	r3,zero,1bf0 <__modsi3+0x4c>
    1bdc:	1806d07a 	srli	r3,r3,1
    1be0:	11400136 	bltu	r2,r5,1be8 <__modsi3+0x44>
    1be4:	1145c83a 	sub	r2,r2,r5
    1be8:	280ad07a 	srli	r5,r5,1
    1bec:	183ffb1e 	bne	r3,zero,1bdc <_gp+0xffff7cf4>
    1bf0:	38000126 	beq	r7,zero,1bf8 <__modsi3+0x54>
    1bf4:	0085c83a 	sub	r2,zero,r2
    1bf8:	f800283a 	ret
    1bfc:	014bc83a 	sub	r5,zero,r5
    1c00:	003fec06 	br	1bb4 <_gp+0xffff7ccc>
    1c04:	0109c83a 	sub	r4,zero,r4
    1c08:	01c00044 	movi	r7,1
    1c0c:	003fe706 	br	1bac <_gp+0xffff7cc4>
    1c10:	00c00044 	movi	r3,1
    1c14:	003ff106 	br	1bdc <_gp+0xffff7cf4>

00001c18 <__udivsi3>:
    1c18:	200d883a 	mov	r6,r4
    1c1c:	2900152e 	bgeu	r5,r4,1c74 <__udivsi3+0x5c>
    1c20:	28001416 	blt	r5,zero,1c74 <__udivsi3+0x5c>
    1c24:	00800804 	movi	r2,32
    1c28:	00c00044 	movi	r3,1
    1c2c:	00000206 	br	1c38 <__udivsi3+0x20>
    1c30:	10000e26 	beq	r2,zero,1c6c <__udivsi3+0x54>
    1c34:	28000516 	blt	r5,zero,1c4c <__udivsi3+0x34>
    1c38:	294b883a 	add	r5,r5,r5
    1c3c:	10bfffc4 	addi	r2,r2,-1
    1c40:	18c7883a 	add	r3,r3,r3
    1c44:	293ffa36 	bltu	r5,r4,1c30 <_gp+0xffff7d48>
    1c48:	18000826 	beq	r3,zero,1c6c <__udivsi3+0x54>
    1c4c:	0005883a 	mov	r2,zero
    1c50:	31400236 	bltu	r6,r5,1c5c <__udivsi3+0x44>
    1c54:	314dc83a 	sub	r6,r6,r5
    1c58:	10c4b03a 	or	r2,r2,r3
    1c5c:	1806d07a 	srli	r3,r3,1
    1c60:	280ad07a 	srli	r5,r5,1
    1c64:	183ffa1e 	bne	r3,zero,1c50 <_gp+0xffff7d68>
    1c68:	f800283a 	ret
    1c6c:	0005883a 	mov	r2,zero
    1c70:	f800283a 	ret
    1c74:	00c00044 	movi	r3,1
    1c78:	003ff406 	br	1c4c <_gp+0xffff7d64>

00001c7c <__umodsi3>:
    1c7c:	2005883a 	mov	r2,r4
    1c80:	2900122e 	bgeu	r5,r4,1ccc <__umodsi3+0x50>
    1c84:	28001116 	blt	r5,zero,1ccc <__umodsi3+0x50>
    1c88:	01800804 	movi	r6,32
    1c8c:	00c00044 	movi	r3,1
    1c90:	00000206 	br	1c9c <__umodsi3+0x20>
    1c94:	30000c26 	beq	r6,zero,1cc8 <__umodsi3+0x4c>
    1c98:	28000516 	blt	r5,zero,1cb0 <__umodsi3+0x34>
    1c9c:	294b883a 	add	r5,r5,r5
    1ca0:	31bfffc4 	addi	r6,r6,-1
    1ca4:	18c7883a 	add	r3,r3,r3
    1ca8:	293ffa36 	bltu	r5,r4,1c94 <_gp+0xffff7dac>
    1cac:	18000626 	beq	r3,zero,1cc8 <__umodsi3+0x4c>
    1cb0:	1806d07a 	srli	r3,r3,1
    1cb4:	11400136 	bltu	r2,r5,1cbc <__umodsi3+0x40>
    1cb8:	1145c83a 	sub	r2,r2,r5
    1cbc:	280ad07a 	srli	r5,r5,1
    1cc0:	183ffb1e 	bne	r3,zero,1cb0 <_gp+0xffff7dc8>
    1cc4:	f800283a 	ret
    1cc8:	f800283a 	ret
    1ccc:	00c00044 	movi	r3,1
    1cd0:	003ff706 	br	1cb0 <_gp+0xffff7dc8>
